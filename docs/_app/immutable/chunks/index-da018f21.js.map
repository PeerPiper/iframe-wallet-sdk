{"version":3,"mappings":"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,MAAM;AACtB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,KAAK,KAAM,CAAC,KAAK;AACnB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,MAAO,CAAC,MAAM;AACtB,WAAE,MAAM,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M,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,WAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,YAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,YAAO,MAAM,KAAK,KAAK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A,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA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,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,MACF;AAAA,IACF;AAAA,IACD,KAAK;AAAA,MACH,KAAK;AAAA,MACL,QAAQ;AAAA,QACN;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,QACD;AAAA,UACE;AAAA,UACA;AAAA,QACD;AAAA,MACF;AAAA,IACF;AAAA;;;;A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AY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAAY;AAAA,IAAY;AAAA,IACpC;AAAA,IAAY;AAAA,IAA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AI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IA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AAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,UAAM,IAAI;AACV,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,QAAI,EAAE;AACN,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,WAAO,IAAI;AACX,W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","names":["ptr","code","description","name","length","signature","secret","f","instance","this","d","b","base64","Coder","s","encode","encode_1","decode","URLSafeCoder","deepHash","tag","ArweaveUtils.concatBuffers","ArweaveUtils.stringToBuffer","deepHashChunks","BigNumber","ALPHABET","alphabet","rand","sign","r","base","compare","format","concatBuffers","b64UrlToString","b64UrlToBuffer","TextDecoder","bufferToString","stringToBuffer","string","TextEncoder","stringToB64Url","toByteArray","b64UrlDecode","bufferTob64","fromByteArray","bufferTob64Url","b64UrlEncode","BaseObject","Tag","Transaction","ArweaveUtils.bufferTob64Url","ArweaveUtils.b64UrlToBuffer","key","browser","proxcryptor","config","BASE","i","j","toString","text","from","basex","pad","identity","int","varint","digest","varint.encodingLength","varint.encodeTo","Digest.create","sha","sha256","sha512","base2","base8","base10","base16","base32","base36","base256emoji","bases","exports","add","require$$0","mul","wipe_1","binary_1","require$$1","SHA256","K","hash","global","bits","createMethod","module","assert","inherits","BN","init","clone","inspect","toJSON","toArray","neg","or","self","comb10MulTo","isOdd","eq","red","prime","mont","utils","zero2","toHex","require$$2","getNAF","getJSF","cachedProperty","parseBytes","brorandModule","brorand","_rand","crypto","curve","validate","dbl","inherits_browserModule","Base","require$$3","point","Point","_getBeta","pre","obj","dblp","isInfinity","decodePoint","pointFromJSON","precompute","_encode","fromJSON","mulAdd","getX","jpoint","pointFromX","jmulAdd","normalize","getY","eqXToP","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","BlockHash","common","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","shaCommon","_update","SHA512","require$$4","update","curves","HmacDRBG","hmac","generate","KeyPair","ec","pub","priv","verify","Signature","require$$5","require$$6","s2","e","eddsa","fromPublic","getPublic","R","Rencoded","S","keyFromPublic","elliptic","BrowserRandomSource","NodeRandomSource","require","SystemRandomSource","ROUNDS","streamXOR","src","stream","Poly1305","equal","chacha_1","ChaCha20Poly1305","XChaCha20Poly1305","MessageType","Resolution","ErrorCode","NativeErrorName","NativeEventType","ctx","width","node","linear","create_if_block","_a","ArweaveUtils.winstonToAr"],"sources":["../../../../../../node_modules/@peerpiper/wasm-wallet-bindings/dist/index.mjs","../../../../../../node_modules/@stablelib/base64/lib/base64.js","../../../../../../src/lib/engine/handlers/arweave/deepHash.ts","../../../../../../node_modules/bignumber.js/bignumber.mjs","../../../../../../src/lib/engine/handlers/arweave/utils.ts","../../../../../../src/lib/engine/handlers/arweave/index.ts","../../../../../../src/lib/engine/internal/index.ts","../../../../../../src/lib/engine/handlers/proxcryptor/index.ts","../../../../../../node_modules/uint8arrays/esm/src/alloc.js","../../../../../../node_modules/multiformats/esm/vendor/base-x.js","../../../../../../node_modules/multiformats/esm/src/bytes.js","../../../../../../node_modules/multiformats/esm/src/bases/base.js","../../../../../../node_modules/multiformats/esm/src/bases/identity.js","../../../../../../node_modules/multiformats/esm/src/bases/base2.js","../../../../../../node_modules/multiformats/esm/src/bases/base8.js","../../../../../../node_modules/multiformats/esm/src/bases/base10.js","../../../../../../node_modules/multiformats/esm/src/bases/base16.js","../../../../../../node_modules/multiformats/esm/src/bases/base32.js","../../../../../../node_modules/multiformats/esm/src/bases/base36.js","../../../../../../node_modules/multiformats/esm/src/bases/base58.js","../../../../../../node_modules/multiformats/esm/src/bases/base64.js","../../../../../../node_modules/multiformats/esm/src/bases/base256emoji.js","../../../../../../node_modules/multiformats/esm/vendor/varint.js","../../../../../../node_modules/multiformats/esm/src/varint.js","../../../../../../node_modules/multiformats/esm/src/hashes/digest.js","../../../../../../node_modules/multiformats/esm/src/hashes/hasher.js","../../../../../../node_modules/multiformats/esm/src/hashes/sha2-browser.js","../../../../../../node_modules/multiformats/esm/src/hashes/identity.js","../../../../../../node_modules/multiformats/esm/src/codecs/json.js","../../../../../../node_modules/multiformats/esm/src/basics.js","../../../../../../node_modules/uint8arrays/esm/src/util/bases.js","../../../../../../node_modules/uint8arrays/esm/src/to-string.js","../../../../../../node_modules/@stablelib/int/lib/int.js","../../../../../../node_modules/@stablelib/binary/lib/binary.js","../../../../../../node_modules/@stablelib/wipe/lib/wipe.js","../../../../../../node_modules/@stablelib/sha256/lib/sha256.js","../../../../../../node_modules/js-sha3/src/sha3.js","../../../../../../__vite-browser-external","../../../../../../node_modules/bn.js/lib/bn.js","../../../../../../node_modules/minimalistic-assert/index.js","../../../../../../node_modules/minimalistic-crypto-utils/lib/utils.js","../../../../../../node_modules/elliptic/lib/elliptic/utils.js","../../../../../../node_modules/brorand/index.js","../../../../../../node_modules/elliptic/lib/elliptic/curve/base.js","../../../../../../node_modules/inherits/inherits_browser.js","../../../../../../node_modules/elliptic/lib/elliptic/curve/short.js","../../../../../../node_modules/elliptic/lib/elliptic/curve/mont.js","../../../../../../node_modules/elliptic/lib/elliptic/curve/edwards.js","../../../../../../node_modules/elliptic/lib/elliptic/curve/index.js","../../../../../../node_modules/hash.js/lib/hash/utils.js","../../../../../../node_modules/hash.js/lib/hash/common.js","../../../../../../node_modules/hash.js/lib/hash/sha/common.js","../../../../../../node_modules/hash.js/lib/hash/sha/1.js","../../../../../../node_modules/hash.js/lib/hash/sha/256.js","../../../../../../node_modules/hash.js/lib/hash/sha/224.js","../../../../../../node_modules/hash.js/lib/hash/sha/512.js","../../../../../../node_modules/hash.js/lib/hash/sha/384.js","../../../../../../node_modules/hash.js/lib/hash/sha.js","../../../../../../node_modules/hash.js/lib/hash/ripemd.js","../../../../../../node_modules/hash.js/lib/hash/hmac.js","../../../../../../node_modules/hash.js/lib/hash.js","../../../../../../node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","../../../../../../node_modules/elliptic/lib/elliptic/curves.js","../../../../../../node_modules/hmac-drbg/lib/hmac-drbg.js","../../../../../../node_modules/elliptic/lib/elliptic/ec/key.js","../../../../../../node_modules/elliptic/lib/elliptic/ec/signature.js","../../../../../../node_modules/elliptic/lib/elliptic/ec/index.js","../../../../../../node_modules/elliptic/lib/elliptic/eddsa/key.js","../../../../../../node_modules/elliptic/lib/elliptic/eddsa/signature.js","../../../../../../node_modules/elliptic/lib/elliptic/eddsa/index.js","../../../../../../node_modules/elliptic/lib/elliptic.js","../../../../../../node_modules/@stablelib/random/lib/source/browser.js","../../../../../../node_modules/@stablelib/random/lib/source/node.js","../../../../../../node_modules/@stablelib/random/lib/source/system.js","../../../../../../node_modules/@stablelib/random/lib/random.js","../../../../../../node_modules/@stablelib/sha512/lib/sha512.js","../../../../../../node_modules/@stablelib/ed25519/lib/ed25519.js","../../../../../../node_modules/bech32/dist/index.js","../../../../../../node_modules/@stablelib/x25519/lib/x25519.js","../../../../../../node_modules/@stablelib/chacha/lib/chacha.js","../../../../../../node_modules/@stablelib/xchacha20/lib/xchacha20.js","../../../../../../node_modules/@stablelib/constant-time/lib/constant-time.js","../../../../../../node_modules/@stablelib/poly1305/lib/poly1305.js","../../../../../../node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js","../../../../../../node_modules/@stablelib/xchacha20poly1305/lib/xchacha20poly1305.js","../../../../../../node_modules/did-jwt/lib/index.module.js","../../../../../../src/lib/engine/handlers/ed25519/index.ts","../../../../../../src/lib/engine/handlers/index.ts","../../../../../../node_modules/penpal/lib/enums.js","../../../../../../src/lib/frontend/AutoSizer.svelte","../../../../../../src/lib/frontend/stores.js","../../../../../../src/lib/frontend/components/atomic/Button.svelte","../../../../../../src/lib/frontend/Connector.svelte","../../../../../../src/lib/frontend/utils.ts","../../../../../../node_modules/svelte/transition/index.mjs","../../../../../../src/lib/frontend/Clipboard.svelte","../../../../../../src/lib/frontend/components/atomic/EncodingSelector.svelte","../../../../../../src/lib/frontend/ListKeys.svelte","../../../../../../src/lib/frontend/GetKeys.svelte","../../../../../../src/lib/frontend/Opened.svelte","../../../../../../src/lib/frontend/components/confirm/DefaultConfirmation.svelte","../../../../../../src/lib/frontend/components/confirm/Connect.svelte","../../../../../../src/lib/frontend/components/confirm/arweave/deepHash.ts","../../../../../../src/lib/frontend/components/confirm/arweave/utils.ts","../../../../../../src/lib/frontend/components/confirm/ArweaveSign.svelte","../../../../../../src/lib/frontend/components/confirm/Sign.svelte","../../../../../../src/lib/frontend/components/confirm/Decrypt.svelte","../../../../../../src/lib/frontend/components/confirm/ReDecrypt.svelte","../../../../../../src/lib/frontend/components/confirm/TransformTagKey.svelte","../../../../../../src/lib/frontend/components/confirm/index.ts","../../../../../../src/lib/frontend/Confirmer.svelte","../../../../../../src/lib/frontend/Index.svelte","../../../../../../src/lib/frontend/constants.js"],"sourcesContent":["let wasm$1\n\nconst heap = new Array(32).fill(undefined)\n\nheap.push(undefined, null, true, false)\n\nfunction getObject(idx) {\n    return heap[idx]\n}\n\nlet heap_next = heap.length\n\nfunction dropObject(idx) {\n    if (idx < 36) return\n    heap[idx] = heap_next\n    heap_next = idx\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx)\n    dropObject(idx)\n    return ret\n}\n\nlet WASM_VECTOR_LEN = 0\n\nlet cachegetUint8Memory0 = null\nfunction getUint8Memory0() {\n    if (\n        cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm$1.memory.buffer\n    ) {\n        cachegetUint8Memory0 = new Uint8Array(wasm$1.memory.buffer)\n    }\n    return cachegetUint8Memory0\n}\n\nlet cachedTextEncoder = new TextEncoder(\"utf-8\")\n\nconst encodeString =\n    typeof cachedTextEncoder.encodeInto === \"function\"\n        ? function (arg, view) {\n              return cachedTextEncoder.encodeInto(arg, view)\n          }\n        : function (arg, view) {\n              const buf = cachedTextEncoder.encode(arg)\n              view.set(buf)\n              return {\n                  read: arg.length,\n                  written: buf.length,\n              }\n          }\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg)\n        const ptr = malloc(buf.length)\n        getUint8Memory0()\n            .subarray(ptr, ptr + buf.length)\n            .set(buf)\n        WASM_VECTOR_LEN = buf.length\n        return ptr\n    }\n\n    let len = arg.length\n    let ptr = malloc(len)\n\n    const mem = getUint8Memory0()\n\n    let offset = 0\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset)\n        if (code > 0x7f) break\n        mem[ptr + offset] = code\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset)\n        }\n        ptr = realloc(ptr, len, (len = offset + arg.length * 3))\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len)\n        const ret = encodeString(arg, view)\n\n        offset += ret.written\n    }\n\n    WASM_VECTOR_LEN = offset\n    return ptr\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null\n}\n\nlet cachegetInt32Memory0 = null\nfunction getInt32Memory0() {\n    if (\n        cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm$1.memory.buffer\n    ) {\n        cachegetInt32Memory0 = new Int32Array(wasm$1.memory.buffer)\n    }\n    return cachegetInt32Memory0\n}\n\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n})\n\ncachedTextDecoder.decode()\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len))\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1)\n    const idx = heap_next\n    heap_next = heap[idx]\n\n    heap[idx] = obj\n    return idx\n}\n\nlet cachegetFloat64Memory0 = null\nfunction getFloat64Memory0() {\n    if (\n        cachegetFloat64Memory0 === null ||\n        cachegetFloat64Memory0.buffer !== wasm$1.memory.buffer\n    ) {\n        cachegetFloat64Memory0 = new Float64Array(wasm$1.memory.buffer)\n    }\n    return cachegetFloat64Memory0\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`\n    }\n    if (type == \"symbol\") {\n        const description = val.description\n        if (description == null) {\n            return \"Symbol\"\n        } else {\n            return `Symbol(${description})`\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`\n        } else {\n            return \"Function\"\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length\n        let debug = \"[\"\n        if (length > 0) {\n            debug += debugString(val[0])\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i])\n        }\n        debug += \"]\"\n        return debug\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val))\n    let className\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1]\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val)\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\"\n        } catch (_) {\n            return \"Object\"\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className\n}\n/**\n * @returns {any}\n */\nfunction generate_mnemonic() {\n    var ret = wasm$1.generate_mnemonic()\n    return takeObject(ret)\n}\n\n/**\n * @param {any} seed\n * @returns {Proxcryptor}\n */\nfunction seed_to_proxcryptor(seed) {\n    var ret = wasm$1.seed_to_proxcryptor(addHeapObject(seed))\n    return Proxcryptor.__wrap(ret)\n}\n\n/**\n * @param {string} mnemonic_str\n * @returns {Proxcryptor}\n */\nfunction mnemonic_to_proxcryptor(mnemonic_str) {\n    var ptr0 = passStringToWasm0(\n        mnemonic_str,\n        wasm$1.__wbindgen_malloc,\n        wasm$1.__wbindgen_realloc\n    )\n    var len0 = WASM_VECTOR_LEN\n    var ret = wasm$1.mnemonic_to_proxcryptor(ptr0, len0)\n    return Proxcryptor.__wrap(ret)\n}\n\n/**\n * @returns {SimpleKeypair}\n */\nfunction generate_ed25519_keypair() {\n    var ret = wasm$1.generate_ed25519_keypair()\n    return SimpleKeypair.__wrap(ret)\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1)\n    getUint8Memory0().set(arg, ptr / 1)\n    WASM_VECTOR_LEN = arg.length\n    return ptr\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len)\n}\n/**\n * @param {any} secret_key_bytes\n * @param {Uint8Array} message\n * @returns {Uint8Array}\n */\nfunction sign(secret_key_bytes, message) {\n    try {\n        const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16)\n        var ptr0 = passArray8ToWasm0(message, wasm$1.__wbindgen_malloc)\n        var len0 = WASM_VECTOR_LEN\n        wasm$1.sign(retptr, addHeapObject(secret_key_bytes), ptr0, len0)\n        var r0 = getInt32Memory0()[retptr / 4 + 0]\n        var r1 = getInt32Memory0()[retptr / 4 + 1]\n        var v1 = getArrayU8FromWasm0(r0, r1).slice()\n        wasm$1.__wbindgen_free(r0, r1 * 1)\n        return v1\n    } finally {\n        wasm$1.__wbindgen_add_to_stack_pointer(16)\n    }\n}\n\n/**\n * @param {any} public_key\n * @param {any} message\n * @param {any} signature\n * @returns {boolean}\n */\nfunction verify(public_key, message, signature) {\n    var ret = wasm$1.verify(\n        addHeapObject(public_key),\n        addHeapObject(message),\n        addHeapObject(signature)\n    )\n    return ret !== 0\n}\n\n/**\n * @param {any} secret\n * @returns {SimpleKeypair}\n */\nfunction generate_ed25519_keypair_from_seed(secret) {\n    var ret = wasm$1.generate_ed25519_keypair_from_seed(addHeapObject(secret))\n    return SimpleKeypair.__wrap(ret)\n}\n\n/**\n * @param {any} target_keypair\n * @param {any} encrypted_message\n * @param {any} re_key\n * @returns {any}\n */\nfunction re_encrypt(target_keypair, encrypted_message, re_key) {\n    var ret = wasm$1.re_encrypt(\n        addHeapObject(target_keypair),\n        addHeapObject(encrypted_message),\n        addHeapObject(re_key)\n    )\n    return takeObject(ret)\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args)\n    } catch (e) {\n        wasm$1.__wbindgen_exn_store(addHeapObject(e))\n    }\n}\n/**\n */\nclass Proxcryptor {\n    static __wrap(ptr) {\n        const obj = Object.create(Proxcryptor.prototype)\n        obj.ptr = ptr\n\n        return obj\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr\n        this.ptr = 0\n\n        return ptr\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw()\n        wasm$1.__wbg_proxcryptor_free(ptr)\n    }\n    /**\n     * @param {any} secret\n     * @returns {Proxcryptor}\n     */\n    static new(secret) {\n        var ret = wasm$1.proxcryptor_new(addHeapObject(secret))\n        return Proxcryptor.__wrap(ret)\n    }\n    /**\n     * @returns {any}\n     */\n    public_key() {\n        var ret = wasm$1.proxcryptor_public_key(this.ptr)\n        return takeObject(ret)\n    }\n    /**\n     * @returns {any}\n     */\n    public_key_base58() {\n        var ret = wasm$1.proxcryptor_public_key_base58(this.ptr)\n        return takeObject(ret)\n    }\n    /**\n     * @returns {any}\n     */\n    public_key_jwk() {\n        var ret = wasm$1.proxcryptor_public_key_jwk(this.ptr)\n        return takeObject(ret)\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {string} tag\n     * @returns {any}\n     */\n    self_encrypt(data, tag) {\n        var ptr0 = passArray8ToWasm0(data, wasm$1.__wbindgen_malloc)\n        var len0 = WASM_VECTOR_LEN\n        var ptr1 = passStringToWasm0(\n            tag,\n            wasm$1.__wbindgen_malloc,\n            wasm$1.__wbindgen_realloc\n        )\n        var len1 = WASM_VECTOR_LEN\n        var ret = wasm$1.proxcryptor_self_encrypt(\n            this.ptr,\n            ptr0,\n            len0,\n            ptr1,\n            len1\n        )\n        return takeObject(ret)\n    }\n    /**\n     * @param {any} encrypted_message\n     * @returns {any}\n     */\n    self_decrypt(encrypted_message) {\n        var ret = wasm$1.proxcryptor_self_decrypt(\n            this.ptr,\n            addHeapObject(encrypted_message)\n        )\n        return takeObject(ret)\n    }\n    /**\n     * @param {any} public_key\n     * @param {string} tag\n     * @returns {any}\n     */\n    generate_re_key(public_key, tag) {\n        var ptr0 = passStringToWasm0(\n            tag,\n            wasm$1.__wbindgen_malloc,\n            wasm$1.__wbindgen_realloc\n        )\n        var len0 = WASM_VECTOR_LEN\n        var ret = wasm$1.proxcryptor_generate_re_key(\n            this.ptr,\n            addHeapObject(public_key),\n            ptr0,\n            len0\n        )\n        return takeObject(ret)\n    }\n    /**\n     * @param {any} rem\n     * @returns {any}\n     */\n    re_decrypt(rem) {\n        var ret = wasm$1.proxcryptor_re_decrypt(this.ptr, addHeapObject(rem))\n        return takeObject(ret)\n    }\n    /**\n     * @param {Uint8Array} msg\n     * @returns {Uint8Array}\n     */\n    sign(msg) {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16)\n            var ptr0 = passArray8ToWasm0(msg, wasm$1.__wbindgen_malloc)\n            var len0 = WASM_VECTOR_LEN\n            wasm$1.proxcryptor_sign(retptr, this.ptr, ptr0, len0)\n            var r0 = getInt32Memory0()[retptr / 4 + 0]\n            var r1 = getInt32Memory0()[retptr / 4 + 1]\n            var v1 = getArrayU8FromWasm0(r0, r1).slice()\n            wasm$1.__wbindgen_free(r0, r1 * 1)\n            return v1\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16)\n        }\n    }\n}\n/**\n * Return a simple keypair object/struct\n */\nclass SimpleKeypair {\n    static __wrap(ptr) {\n        const obj = Object.create(SimpleKeypair.prototype)\n        obj.ptr = ptr\n\n        return obj\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr\n        this.ptr = 0\n\n        return ptr\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw()\n        wasm$1.__wbg_simplekeypair_free(ptr)\n    }\n    /**\n     * @returns {any}\n     */\n    public() {\n        var ret = wasm$1.simplekeypair_public(this.ptr)\n        return takeObject(ret)\n    }\n    /**\n     * @returns {any}\n     */\n    secret() {\n        var ret = wasm$1.simplekeypair_secret(this.ptr)\n        return takeObject(ret)\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports)\n            } catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\n                        \"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\",\n                        e\n                    )\n                } else {\n                    throw e\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer()\n        return await WebAssembly.instantiate(bytes, imports)\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports)\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module }\n        } else {\n            return instance\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        // input = new URL('index_bg.wasm', import.meta.url);\n    }\n    const imports = {}\n    imports.wbg = {}\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0)\n    }\n    imports.wbg.__wbg_log_2d3255d249750bce = function (arg0, arg1) {\n        console.log(getStringFromWasm0(arg0, arg1))\n    }\n    imports.wbg.__wbindgen_string_get = function (arg0, arg1) {\n        const obj = getObject(arg1)\n        var ret = typeof obj === \"string\" ? obj : undefined\n        var ptr0 = isLikeNone(ret)\n            ? 0\n            : passStringToWasm0(\n                  ret,\n                  wasm$1.__wbindgen_malloc,\n                  wasm$1.__wbindgen_realloc\n              )\n        var len0 = WASM_VECTOR_LEN\n        getInt32Memory0()[arg0 / 4 + 1] = len0\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0\n    }\n    imports.wbg.__wbindgen_is_object = function (arg0) {\n        const val = getObject(arg0)\n        var ret = typeof val === \"object\" && val !== null\n        return ret\n    }\n    imports.wbg.__wbindgen_json_parse = function (arg0, arg1) {\n        var ret = JSON.parse(getStringFromWasm0(arg0, arg1))\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbindgen_is_null = function (arg0) {\n        var ret = getObject(arg0) === null\n        return ret\n    }\n    imports.wbg.__wbindgen_is_undefined = function (arg0) {\n        var ret = getObject(arg0) === undefined\n        return ret\n    }\n    imports.wbg.__wbindgen_boolean_get = function (arg0) {\n        const v = getObject(arg0)\n        var ret = typeof v === \"boolean\" ? (v ? 1 : 0) : 2\n        return ret\n    }\n    imports.wbg.__wbindgen_number_get = function (arg0, arg1) {\n        const obj = getObject(arg1)\n        var ret = typeof obj === \"number\" ? obj : undefined\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret)\n    }\n    imports.wbg.__wbindgen_object_clone_ref = function (arg0) {\n        var ret = getObject(arg0)\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_get_2d1407dba3452350 = function (arg0, arg1) {\n        var ret = getObject(arg0)[takeObject(arg1)]\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_getRandomValues_98117e9a7e993920 = function () {\n        return handleError(function (arg0, arg1) {\n            getObject(arg0).getRandomValues(getObject(arg1))\n        }, arguments)\n    }\n    imports.wbg.__wbg_randomFillSync_64cc7d048f228ca8 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2))\n        }, arguments)\n    }\n    imports.wbg.__wbg_process_2f24d6544ea7b200 = function (arg0) {\n        var ret = getObject(arg0).process\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_versions_6164651e75405d4a = function (arg0) {\n        var ret = getObject(arg0).versions\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_node_4b517d861cbcb3bc = function (arg0) {\n        var ret = getObject(arg0).node\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbindgen_is_string = function (arg0) {\n        var ret = typeof getObject(arg0) === \"string\"\n        return ret\n    }\n    imports.wbg.__wbg_modulerequire_3440a4bcf44437db = function () {\n        return handleError(function (arg0, arg1) {\n            var ret = module.require(getStringFromWasm0(arg0, arg1))\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_crypto_98fc271021c7d2ad = function (arg0) {\n        var ret = getObject(arg0).crypto\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_msCrypto_a2cdb043d2bfe57f = function (arg0) {\n        var ret = getObject(arg0).msCrypto\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbindgen_is_function = function (arg0) {\n        var ret = typeof getObject(arg0) === \"function\"\n        return ret\n    }\n    imports.wbg.__wbg_newnoargs_be86524d73f67598 = function (arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1))\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_next_c4151d46d5fa7097 = function (arg0) {\n        var ret = getObject(arg0).next\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_next_7720502039b96d00 = function () {\n        return handleError(function (arg0) {\n            var ret = getObject(arg0).next()\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_done_b06cf0578e89ff68 = function (arg0) {\n        var ret = getObject(arg0).done\n        return ret\n    }\n    imports.wbg.__wbg_value_e74a542443d92451 = function (arg0) {\n        var ret = getObject(arg0).value\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_iterator_4fc4ce93e6b92958 = function () {\n        var ret = Symbol.iterator\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_get_4d0f21c2f823742e = function () {\n        return handleError(function (arg0, arg1) {\n            var ret = Reflect.get(getObject(arg0), getObject(arg1))\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_call_888d259a5fefc347 = function () {\n        return handleError(function (arg0, arg1) {\n            var ret = getObject(arg0).call(getObject(arg1))\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1)\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_isArray_eb7ad55f2da67dde = function (arg0) {\n        var ret = Array.isArray(getObject(arg0))\n        return ret\n    }\n    imports.wbg.__wbg_instanceof_ArrayBuffer_764b6d4119231cb3 = function (\n        arg0\n    ) {\n        var ret = getObject(arg0) instanceof ArrayBuffer\n        return ret\n    }\n    imports.wbg.__wbg_values_364ae56c608e6824 = function (arg0) {\n        var ret = getObject(arg0).values()\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_new_342a24ca698edd87 = function (arg0, arg1) {\n        var ret = new Error(getStringFromWasm0(arg0, arg1))\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_isSafeInteger_0dfc6d38b7184f06 = function (arg0) {\n        var ret = Number.isSafeInteger(getObject(arg0))\n        return ret\n    }\n    imports.wbg.__wbg_self_c6fbdfc2918d5e58 = function () {\n        return handleError(function () {\n            var ret = self.self\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_window_baec038b5ab35c54 = function () {\n        return handleError(function () {\n            var ret = window.window\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_globalThis_3f735a5746d41fbd = function () {\n        return handleError(function () {\n            var ret = globalThis.globalThis\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_global_1bc0b39582740e95 = function () {\n        return handleError(function () {\n            var ret = global.global\n            return addHeapObject(ret)\n        }, arguments)\n    }\n    imports.wbg.__wbg_buffer_397eaa4d72ee94dd = function (arg0) {\n        var ret = getObject(arg0).buffer\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_new_a7ce447f15ff496f = function (arg0) {\n        var ret = new Uint8Array(getObject(arg0))\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_set_969ad0a60e51d320 = function (arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0)\n    }\n    imports.wbg.__wbg_length_1eb8fc608a0d4cdb = function (arg0) {\n        var ret = getObject(arg0).length\n        return ret\n    }\n    imports.wbg.__wbg_instanceof_Uint8Array_08a1f3a179095e76 = function (arg0) {\n        var ret = getObject(arg0) instanceof Uint8Array\n        return ret\n    }\n    imports.wbg.__wbg_newwithlength_929232475839a482 = function (arg0) {\n        var ret = new Uint8Array(arg0 >>> 0)\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbg_subarray_8b658422a224f479 = function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0)\n        return addHeapObject(ret)\n    }\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        var ret = debugString(getObject(arg1))\n        var ptr0 = passStringToWasm0(\n            ret,\n            wasm$1.__wbindgen_malloc,\n            wasm$1.__wbindgen_realloc\n        )\n        var len0 = WASM_VECTOR_LEN\n        getInt32Memory0()[arg0 / 4 + 1] = len0\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0\n    }\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1))\n    }\n    imports.wbg.__wbindgen_memory = function () {\n        var ret = wasm$1.memory\n        return addHeapObject(ret)\n    }\n\n    if (\n        typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)\n    ) {\n        input = fetch(input)\n    }\n\n    const { instance, module } = await load(await input, imports)\n\n    wasm$1 = instance.exports\n    init.__wbindgen_wasm_module = module\n\n    return wasm$1\n}\n\nvar exports = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    generate_mnemonic: generate_mnemonic,\n    seed_to_proxcryptor: seed_to_proxcryptor,\n    mnemonic_to_proxcryptor: mnemonic_to_proxcryptor,\n    generate_ed25519_keypair: generate_ed25519_keypair,\n    sign: sign,\n    verify: verify,\n    generate_ed25519_keypair_from_seed: generate_ed25519_keypair_from_seed,\n    re_encrypt: re_encrypt,\n    Proxcryptor: Proxcryptor,\n    SimpleKeypair: SimpleKeypair,\n    default: init,\n})\n\nconst base64codes = [\n    62, 0, 0, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0,\n    0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n    35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n]\n\nfunction getBase64Code(charCode) {\n    return base64codes[charCode - 43]\n}\n\nfunction base64_decode(str) {\n    let missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0\n    let n = str.length\n    let result = new Uint8Array(3 * (n / 4))\n    let buffer\n\n    for (let i = 0, j = 0; i < n; i += 4, j += 3) {\n        buffer =\n            (getBase64Code(str.charCodeAt(i)) << 18) |\n            (getBase64Code(str.charCodeAt(i + 1)) << 12) |\n            (getBase64Code(str.charCodeAt(i + 2)) << 6) |\n            getBase64Code(str.charCodeAt(i + 3))\n        result[j] = buffer >> 16\n        result[j + 1] = (buffer >> 8) & 0xff\n        result[j + 2] = buffer & 0xff\n    }\n\n    return result.subarray(0, result.length - missingOctets)\n}\n\nconst wasm_code = base64_decode(\n    \"\"\n)\n\nvar wasm = async () => {\n    await init(wasm_code)\n    return exports\n}\n\n// for the exported library for use by other apps\n\nconst getWallet = async () => wasm()\n\nexport { getWallet }\n","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package base64 implements Base64 encoding and decoding.\n */\n// Invalid character used in decoding to indicate\n// that the character to decode is out of range of\n// alphabet and cannot be decoded.\nvar INVALID_BYTE = 256;\n/**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */\nvar Coder = /** @class */ (function () {\n    // TODO(dchest): methods to encode chunk-by-chunk.\n    function Coder(_paddingCharacter) {\n        if (_paddingCharacter === void 0) { _paddingCharacter = \"=\"; }\n        this._paddingCharacter = _paddingCharacter;\n    }\n    Coder.prototype.encodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 8 + 5) / 6 | 0;\n        }\n        return (length + 2) / 3 * 4 | 0;\n    };\n    Coder.prototype.encode = function (data) {\n        var out = \"\";\n        var i = 0;\n        for (; i < data.length - 2; i += 3) {\n            var c = (data[i] << 16) | (data[i + 1] << 8) | (data[i + 2]);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            out += this._encodeByte((c >>> 1 * 6) & 63);\n            out += this._encodeByte((c >>> 0 * 6) & 63);\n        }\n        var left = data.length - i;\n        if (left > 0) {\n            var c = (data[i] << 16) | (left === 2 ? data[i + 1] << 8 : 0);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            if (left === 2) {\n                out += this._encodeByte((c >>> 1 * 6) & 63);\n            }\n            else {\n                out += this._paddingCharacter || \"\";\n            }\n            out += this._paddingCharacter || \"\";\n        }\n        return out;\n    };\n    Coder.prototype.maxDecodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 6 + 7) / 8 | 0;\n        }\n        return length / 4 * 3 | 0;\n    };\n    Coder.prototype.decodedLength = function (s) {\n        return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n    };\n    Coder.prototype.decode = function (s) {\n        if (s.length === 0) {\n            return new Uint8Array(0);\n        }\n        var paddingLength = this._getPaddingLength(s);\n        var length = s.length - paddingLength;\n        var out = new Uint8Array(this.maxDecodedLength(length));\n        var op = 0;\n        var i = 0;\n        var haveBad = 0;\n        var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n        for (; i < length - 4; i += 4) {\n            v0 = this._decodeChar(s.charCodeAt(i + 0));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n            haveBad |= v2 & INVALID_BYTE;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (i < length - 1) {\n            v0 = this._decodeChar(s.charCodeAt(i));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n        }\n        if (i < length - 2) {\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            haveBad |= v2 & INVALID_BYTE;\n        }\n        if (i < length - 3) {\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (haveBad !== 0) {\n            throw new Error(\"Base64Coder: incorrect characters for decoding\");\n        }\n        return out;\n    };\n    // Standard encoding have the following encoded/decoded ranges,\n    // which we need to convert between.\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n    //\n    // Encode 6 bits in b into a new character.\n    Coder.prototype._encodeByte = function (b) {\n        // Encoding uses constant time operations as follows:\n        //\n        // 1. Define comparison of A with B using (A - B) >>> 8:\n        //          if A > B, then result is positive integer\n        //          if A <= B, then result is 0\n        //\n        // 2. Define selection of C or 0 using bitwise AND: X & C:\n        //          if X == 0, then result is 0\n        //          if X != 0, then result is C\n        //\n        // 3. Start with the smallest comparison (b >= 0), which is always\n        //    true, so set the result to the starting ASCII value (65).\n        //\n        // 4. Continue comparing b to higher ASCII values, and selecting\n        //    zero if comparison isn't true, otherwise selecting a value\n        //    to add to result, which:\n        //\n        //          a) undoes the previous addition\n        //          b) provides new value to add\n        //\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 43);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 43) - 63 + 47);\n        return String.fromCharCode(result);\n    };\n    // Decode a character code into a byte.\n    // Must return 256 if character is out of alphabet range.\n    Coder.prototype._decodeChar = function (c) {\n        // Decoding works similar to encoding: using the same comparison\n        // function, but now it works on ranges: result is always incremented\n        // by value, but this value becomes zero if the range is not\n        // satisfied.\n        //\n        // Decoding starts with invalid value, 256, which is then\n        // subtracted when the range is satisfied. If none of the ranges\n        // apply, the function returns 256, which is then checked by\n        // the caller to throw error.\n        var result = INVALID_BYTE; // start with invalid character\n        // c == 43 (c > 42 and c < 44)\n        result += (((42 - c) & (c - 44)) >>> 8) & (-INVALID_BYTE + c - 43 + 62);\n        // c == 47 (c > 46 and c < 48)\n        result += (((46 - c) & (c - 48)) >>> 8) & (-INVALID_BYTE + c - 47 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    Coder.prototype._getPaddingLength = function (s) {\n        var paddingLength = 0;\n        if (this._paddingCharacter) {\n            for (var i = s.length - 1; i >= 0; i--) {\n                if (s[i] !== this._paddingCharacter) {\n                    break;\n                }\n                paddingLength++;\n            }\n            if (s.length < 4 || paddingLength > 2) {\n                throw new Error(\"Base64Coder: incorrect padding\");\n            }\n        }\n        return paddingLength;\n    };\n    return Coder;\n}());\nexports.Coder = Coder;\nvar stdCoder = new Coder();\nfunction encode(data) {\n    return stdCoder.encode(data);\n}\nexports.encode = encode;\nfunction decode(s) {\n    return stdCoder.decode(s);\n}\nexports.decode = decode;\n/**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */\nvar URLSafeCoder = /** @class */ (function (_super) {\n    __extends(URLSafeCoder, _super);\n    function URLSafeCoder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // URL-safe encoding have the following encoded/decoded ranges:\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n    //\n    URLSafeCoder.prototype._encodeByte = function (b) {\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 45);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 45) - 63 + 95);\n        return String.fromCharCode(result);\n    };\n    URLSafeCoder.prototype._decodeChar = function (c) {\n        var result = INVALID_BYTE;\n        // c == 45 (c > 44 and c < 46)\n        result += (((44 - c) & (c - 46)) >>> 8) & (-INVALID_BYTE + c - 45 + 62);\n        // c == 95 (c > 94 and c < 96)\n        result += (((94 - c) & (c - 96)) >>> 8) & (-INVALID_BYTE + c - 95 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    return URLSafeCoder;\n}(Coder));\nexports.URLSafeCoder = URLSafeCoder;\nvar urlSafeCoder = new URLSafeCoder();\nfunction encodeURLSafe(data) {\n    return urlSafeCoder.encode(data);\n}\nexports.encodeURLSafe = encodeURLSafe;\nfunction decodeURLSafe(s) {\n    return urlSafeCoder.decode(s);\n}\nexports.decodeURLSafe = decodeURLSafe;\nexports.encodedLength = function (length) {\n    return stdCoder.encodedLength(length);\n};\nexports.maxDecodedLength = function (length) {\n    return stdCoder.maxDecodedLength(length);\n};\nexports.decodedLength = function (s) {\n    return stdCoder.decodedLength(s);\n};\n//# sourceMappingURL=base64.js.map","import * as ArweaveUtils from './utils';\r\n\r\n// In TypeScript 3.7, could be written as a single type:\r\n// `type DeepHashChunk = Uint8Array | DeepHashChunk[];`\r\ntype DeepHashChunk = Uint8Array | DeepHashChunks;\r\ninterface DeepHashChunks extends Array<DeepHashChunk> {}\r\n\r\nexport default async function deepHash(data: DeepHashChunk): Promise<Uint8Array> {\r\n\tif (Array.isArray(data)) {\r\n\t\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\t\tArweaveUtils.stringToBuffer('list'),\r\n\t\t\tArweaveUtils.stringToBuffer(data.length.toString())\r\n\t\t]);\r\n\r\n\t\treturn await deepHashChunks(data, await crypto.subtle.digest('SHA-384', tag));\r\n\t}\r\n\r\n\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\tArweaveUtils.stringToBuffer('blob'),\r\n\t\tArweaveUtils.stringToBuffer(data.byteLength.toString())\r\n\t]);\r\n\r\n\tconst taggedHash = ArweaveUtils.concatBuffers([\r\n\t\tawait crypto.subtle.digest('SHA-384', tag),\r\n\t\tawait crypto.subtle.digest('SHA-384', data)\r\n\t]);\r\n\r\n\treturn await crypto.subtle.digest('SHA-384', taggedHash);\r\n}\r\n\r\nasync function deepHashChunks(chunks: DeepHashChunks, acc: Uint8Array): Promise<Uint8Array> {\r\n\tif (chunks.length < 1) {\r\n\t\treturn acc;\r\n\t}\r\n\r\n\tconst hashPair = ArweaveUtils.concatBuffers([acc, await deepHash(chunks[0])]);\r\n\tconst newAcc = await crypto.subtle.digest('SHA-384', hashPair);\r\n\treturn await deepHashChunks(chunks.slice(1), newAcc);\r\n}\r\n","/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","// import * as B64 from 'base64-js';\r\nimport { encode as fromByteArray, decode as toByteArray } from '@stablelib/base64';\r\nimport deepHash from './deepHash';\r\n// import * as BigNumber from 'bignumber.js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nexport type Base64UrlString = string;\r\n\r\nexport function concatBuffers(buffers: Uint8Array[] | ArrayBuffer[]): Uint8Array {\r\n\tlet total_length = 0;\r\n\r\n\tfor (let i = 0; i < buffers.length; i++) {\r\n\t\ttotal_length += buffers[i].byteLength;\r\n\t}\r\n\r\n\tlet temp = new Uint8Array(total_length);\r\n\tlet offset = 0;\r\n\r\n\ttemp.set(new Uint8Array(buffers[0]), offset);\r\n\toffset += buffers[0].byteLength;\r\n\r\n\tfor (let i = 1; i < buffers.length; i++) {\r\n\t\ttemp.set(new Uint8Array(buffers[i]), offset);\r\n\t\toffset += buffers[i].byteLength;\r\n\t}\r\n\r\n\treturn temp;\r\n}\r\n\r\nexport function b64UrlToString(b64UrlString: string): string {\r\n\tlet buffer = b64UrlToBuffer(b64UrlString);\r\n\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function bufferToString(buffer: Uint8Array | ArrayBuffer): string {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function stringToBuffer(string: string): Uint8Array {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextEncoder == 'undefined') {\r\n\t\tconst TextEncoder = require('util').TextEncoder;\r\n\t\treturn new TextEncoder().encode(string);\r\n\t}\r\n\treturn new TextEncoder().encode(string);\r\n}\r\n\r\nexport function stringToB64Url(string: string): string {\r\n\treturn bufferTob64Url(stringToBuffer(string));\r\n}\r\n\r\nexport function b64UrlToBuffer(b64UrlString: string): Uint8Array {\r\n\treturn new Uint8Array(toByteArray(b64UrlDecode(b64UrlString)));\r\n}\r\n\r\nexport function bufferTob64(buffer: Uint8Array): string {\r\n\treturn fromByteArray(new Uint8Array(buffer));\r\n}\r\n\r\nexport function bufferTob64Url(buffer: Uint8Array): string {\r\n\treturn b64UrlEncode(bufferTob64(buffer));\r\n}\r\n\r\nexport function b64UrlEncode(b64UrlString: string): string {\r\n\treturn b64UrlString.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\r\n}\r\n\r\nexport function b64UrlDecode(b64UrlString: string): string {\r\n\tb64UrlString = b64UrlString.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\tlet padding;\r\n\tb64UrlString.length % 4 == 0 ? (padding = 0) : (padding = 4 - (b64UrlString.length % 4));\r\n\treturn b64UrlString.concat('='.repeat(padding));\r\n}\r\n\r\nexport async function getSignatureData(tx): Promise<Uint8Array> {\r\n\t// Structured clone transfer strips all the fancy Function helpers\r\n\t// reconstruct Transaction Object to get them back\r\n\ttx = new Transaction(tx);\r\n\r\n\tswitch (tx.format) {\r\n\t\tcase 1:\r\n\t\t\tlet tags = tx.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\taccumulator,\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\t}, new Uint8Array());\r\n\r\n\t\t\treturn concatBuffers([\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\ttx.get('data', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttags\r\n\t\t\t]);\r\n\t\tcase 2:\r\n\t\t\tif (!tx.data_root) {\r\n\t\t\t\tawait tx.prepareChunks(tx.data);\r\n\t\t\t}\r\n\r\n\t\t\tconst tagList: [Uint8Array, Uint8Array][] = tx.tags.map((tag) => [\r\n\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t]);\r\n\r\n\t\t\treturn await deepHash([\r\n\t\t\t\tstringToBuffer(tx.format.toString()),\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttagList,\r\n\t\t\t\tstringToBuffer(tx.data_size),\r\n\t\t\t\ttx.get('data_root', { decode: true, string: false })\r\n\t\t\t]);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unexpected transaction format: ${tx.format}`);\r\n\t}\r\n}\r\n\r\nexport function setSignature(\r\n\ttx,\r\n\t{\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}\r\n) {\r\n\ttx.id = id;\r\n\ttx.owner = owner;\r\n\tif (reward) tx.reward = reward;\r\n\tif (tags) tx.tags = tags;\r\n\ttx.signature = signature;\r\n\treturn tx;\r\n}\r\n\r\n// from Arweave TX\r\n// https://github.com/ArweaveTeam/arweave-js/blob/8df379bfd2744fa3525fca8dee1f9d74f352bec6/src/common/lib/transaction.ts#L53\r\nclass BaseObject {\r\n\t[key: string]: any;\r\n\r\n\tpublic get(field: string): string;\r\n\tpublic get(field: string, options: { decode: true; string: false }): Uint8Array;\r\n\tpublic get(field: string, options: { decode: true; string: true }): string;\r\n\r\n\tpublic get(\r\n\t\tfield: string,\r\n\t\toptions?: {\r\n\t\t\tstring?: boolean;\r\n\t\t\tdecode?: boolean;\r\n\t\t}\r\n\t): string | Uint8Array | Tag[] {\r\n\t\tif (!Object.getOwnPropertyNames(this).includes(field)) {\r\n\t\t\tthrow new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\r\n\t\t}\r\n\r\n\t\t// Handle fields that are Uint8Arrays.\r\n\t\t// To maintain compat we encode them to b64url\r\n\t\t// if decode option is not specificed.\r\n\t\tif (this[field] instanceof Uint8Array) {\r\n\t\t\tif (options && options.decode && options.string) {\r\n\t\t\t\treturn bufferToString(this[field]);\r\n\t\t\t}\r\n\t\t\tif (options && options.decode && !options.string) {\r\n\t\t\t\treturn this[field];\r\n\t\t\t}\r\n\t\t\treturn bufferTob64Url(this[field]);\r\n\t\t}\r\n\r\n\t\tif (options && options.decode == true) {\r\n\t\t\tif (options && options.string) {\r\n\t\t\t\treturn b64UrlToString(this[field]);\r\n\t\t\t}\r\n\r\n\t\t\treturn b64UrlToBuffer(this[field]);\r\n\t\t}\r\n\r\n\t\treturn this[field];\r\n\t}\r\n}\r\n\r\nexport class Tag extends BaseObject {\r\n\treadonly name: string;\r\n\treadonly value: string;\r\n\r\n\tpublic constructor(name: string, value: string, decode = false) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n\r\nexport interface TransactionInterface {\r\n\tformat: number;\r\n\tid: string;\r\n\tlast_tx: string;\r\n\towner: string;\r\n\ttags: Tag[];\r\n\ttarget: string;\r\n\tquantity: string;\r\n\tdata: Uint8Array;\r\n\treward: string;\r\n\tsignature: string;\r\n\tdata_size: string;\r\n\tdata_root: string;\r\n}\r\nexport default {};\r\nexport class Transaction extends BaseObject implements TransactionInterface {\r\n\tpublic readonly format: number = 2;\r\n\tpublic id: string = '';\r\n\tpublic readonly last_tx: string = '';\r\n\tpublic owner: string = '';\r\n\tpublic tags: Tag[] = [];\r\n\tpublic readonly target: string = '';\r\n\tpublic readonly quantity: string = '0';\r\n\tpublic readonly data_size: string = '0';\r\n\tpublic data: Uint8Array = new Uint8Array();\r\n\tpublic data_root: string = '';\r\n\tpublic reward: string = '0';\r\n\tpublic signature: string = '';\r\n\r\n\t// Computed when needed.\r\n\tpublic chunks?: {\r\n\t\tdata_root: Uint8Array;\r\n\t\tchunks: Chunk[];\r\n\t\tproofs: Proof[];\r\n\t};\r\n\r\n\tpublic constructor(attributes: Partial<TransactionInterface> = {}) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, attributes);\r\n\r\n\t\t// If something passes in a Tx that has been toJSON'ed and back,\r\n\t\t// or where the data was filled in from /tx/data endpoint.\r\n\t\t// data will be b64url encoded, so decode it.\r\n\t\tif (typeof this.data === 'string') {\r\n\t\t\tthis.data = b64UrlToBuffer(this.data as string);\r\n\t\t}\r\n\r\n\t\tif (attributes.tags) {\r\n\t\t\tthis.tags = attributes.tags.map((tag: { name: string; value: string }) => {\r\n\t\t\t\treturn new Tag(tag.name, tag.value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic addTag(name: string, value: string) {\r\n\t\tthis.tags.push(new Tag(stringToB64Url(name), stringToB64Url(value)));\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn {\r\n\t\t\tformat: this.format,\r\n\t\t\tid: this.id,\r\n\t\t\tlast_tx: this.last_tx,\r\n\t\t\towner: this.owner,\r\n\t\t\ttags: this.tags,\r\n\t\t\ttarget: this.target,\r\n\t\t\tquantity: this.quantity,\r\n\t\t\tdata: bufferTob64Url(this.data),\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_tree: this.data_tree,\r\n\t\t\treward: this.reward,\r\n\t\t\tsignature: this.signature\r\n\t\t};\r\n\t}\r\n\r\n\tpublic setOwner(owner: string) {\r\n\t\tthis.owner = owner;\r\n\t}\r\n\r\n\tpublic setSignature({\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}) {\r\n\t\tthis.id = id;\r\n\t\tthis.owner = owner;\r\n\t\tif (reward) this.reward = reward;\r\n\t\tif (tags) this.tags = tags;\r\n\t\tthis.signature = signature;\r\n\t}\r\n\r\n\tpublic async prepareChunks(data: Uint8Array) {\r\n\t\t// Note: we *do not* use `this.data`, the caller may be\r\n\t\t// operating on a transaction with an zero length data field.\r\n\t\t// This function computes the chunks for the data passed in and\r\n\t\t// assigns the result to this transaction. It should not read the\r\n\t\t// data *from* this transaction.\r\n\r\n\t\tif (!this.chunks && data.byteLength > 0) {\r\n\t\t\tthis.chunks = await generateTransactionChunks(data);\r\n\t\t\tthis.data_root = bufferTob64Url(this.chunks.data_root);\r\n\t\t}\r\n\r\n\t\tif (!this.chunks && data.byteLength === 0) {\r\n\t\t\tthis.chunks = {\r\n\t\t\t\tchunks: [],\r\n\t\t\t\tdata_root: new Uint8Array(),\r\n\t\t\t\tproofs: []\r\n\t\t\t};\r\n\t\t\tthis.data_root = '';\r\n\t\t}\r\n\t}\r\n\r\n\t// Returns a chunk in a format suitable for posting to /chunk.\r\n\t// Similar to `prepareChunks()` this does not operate `this.data`,\r\n\t// instead using the data passed in.\r\n\tpublic getChunk(idx: number, data: Uint8Array) {\r\n\t\tif (!this.chunks) {\r\n\t\t\tthrow new Error(`Chunks have not been prepared`);\r\n\t\t}\r\n\t\tconst proof = this.chunks.proofs[idx];\r\n\t\tconst chunk = this.chunks.chunks[idx];\r\n\t\treturn {\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_path: bufferTob64Url(proof.proof),\r\n\t\t\toffset: proof.offset.toString(),\r\n\t\t\tchunk: bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))\r\n\t\t};\r\n\t}\r\n\r\n\tpublic async getSignatureData(): Promise<Uint8Array> {\r\n\t\tswitch (this.format) {\r\n\t\t\tcase 1:\r\n\t\t\t\tlet tags = this.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\t\taccumulator,\r\n\t\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t\t]);\r\n\t\t\t\t}, new Uint8Array());\r\n\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('data', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttags\r\n\t\t\t\t]);\r\n\t\t\tcase 2:\r\n\t\t\t\tif (!this.data_root) {\r\n\t\t\t\t\tawait this.prepareChunks(this.data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst tagList: [Uint8Array, Uint8Array][] = this.tags.map((tag) => [\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\r\n\t\t\t\treturn await deepHash([\r\n\t\t\t\t\tstringToBuffer(this.format.toString()),\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttagList,\r\n\t\t\t\t\tstringToBuffer(this.data_size),\r\n\t\t\t\t\tthis.get('data_root', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unexpected transaction format: ${this.format}`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function winstonToAr(\r\n\twinstonString: string,\r\n\t{ formatted = false, decimals = 12, trim = true } = {}\r\n) {\r\n\tlet number = stringToBigNum(winstonString, decimals).shiftedBy(-12);\r\n\r\n\treturn formatted ? number.toFormat(decimals) : number.toFixed(decimals);\r\n}\r\n\r\nexport function arToWinston(arString: string, { formatted = false } = {}) {\r\n\tlet number = stringToBigNum(arString).shiftedBy(12);\r\n\r\n\treturn formatted ? number.toFormat() : number.toFixed(0);\r\n}\r\n\r\nfunction stringToBigNum(stringValue: string, decimalPlaces: number = 12): BigNumber {\r\n\treturn BigNum(stringValue, decimalPlaces);\r\n}\r\n\r\nconst BigNum = (value: string, decimals: number): BigNumber => {\r\n\t// because of the way Vite builds libraries that have both commonjs and es modules :/\r\n\tlet instance;\r\n\ttry {\r\n\t\tinstance = BigNumber.clone({ DECIMAL_PLACES: decimals });\r\n\t} catch (error) {\r\n\t\tconsole.warn('Caught big num issues, try default', error);\r\n\t\tinstance = BigNumber.default.clone({ DECIMAL_PLACES: decimals });\r\n\t}\r\n\treturn new instance(value);\r\n};\r\n","// import { JWKInterface, JWKPublicInterface } from 'arweave/wallet';\r\nimport * as ArweaveUtils from \"./utils\"\r\nimport { Transaction } from \"./utils\"\r\nimport { rsa } from \"../../internal/index\"\r\nimport { getConfig } from \"../index\"\r\nimport type Transaction from \"./utils\"\r\n\r\nexport interface SignatureOptions {\r\n    saltLength?: number\r\n}\r\n\r\nlet storedPermissions\r\n\r\nexport const jwkToCryptoKey = async (jwk: JWKInterface): Promise<CryptoKey> => {\r\n    return crypto.subtle.importKey(\r\n        \"jwk\",\r\n        jwk,\r\n        {\r\n            name: \"RSA-PSS\",\r\n            hash: {\r\n                name: \"SHA-256\",\r\n            },\r\n        },\r\n        false,\r\n        [\"sign\"]\r\n    )\r\n}\r\n\r\nconst subtleSign = async (\r\n    jwk: JWKInterface,\r\n    data: Uint8Array,\r\n    { saltLength }: SignatureOptions = { saltLength: 32 }\r\n): Promise<Uint8Array> => {\r\n    let signature = await crypto.subtle.sign(\r\n        {\r\n            name: \"RSA-PSS\",\r\n            saltLength,\r\n        },\r\n        await jwkToCryptoKey(jwk),\r\n        data\r\n    )\r\n\r\n    return new Uint8Array(signature)\r\n}\r\n\r\nexport const generateJWK = async (): Promise<JWKInterface> => {\r\n    let cryptoKey = await crypto.subtle.generateKey(\r\n        {\r\n            name: \"RSA-PSS\",\r\n            modulusLength: 4096,\r\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n            hash: {\r\n                name: \"SHA-256\",\r\n            },\r\n        },\r\n        true,\r\n        [\"sign\"]\r\n    )\r\n\r\n    let jwk = await crypto.subtle.exportKey(\"jwk\", cryptoKey.privateKey!)\r\n\r\n    const kid = await ownerToAddress(jwk.n)\r\n\r\n    // RSA key parameters\r\n    // https://www.gnupg.org/documentation/manuals/gcrypt-devel/RSA-key-parameters.html\r\n    return {\r\n        kty: jwk.kty!,\r\n        e: jwk.e!, // RSA public exponent e\r\n        n: jwk.n!, // RSA public modulus n\r\n        d: jwk.d, // RSA secret exponent d\r\n        p: jwk.p, // RSA secret prime p\r\n        q: jwk.q, // RSA secret prime q with p < q\r\n        dp: jwk.dp,\r\n        dq: jwk.dq,\r\n        qi: jwk.qi,\r\n        kid,\r\n    }\r\n}\r\n\r\nasync function publicKeytoJWK(publicModulus: string) {\r\n    const publicKeyJWK = {\r\n        kty: \"RSA\",\r\n        e: \"AQAB\",\r\n        n: publicModulus,\r\n    }\r\n    // await ownerToAddress(publicKeyJWK.n);\r\n    return publicKeyJWK\r\n}\r\n\r\nasync function ownerToAddress(owner: string): Promise<string> {\r\n    return ArweaveUtils.bufferTob64Url(\r\n        await crypto.subtle.digest(\r\n            \"SHA-256\",\r\n            ArweaveUtils.b64UrlToBuffer(owner)\r\n        )\r\n    )\r\n}\r\n\r\nexport const arweaveWalletAPI = {\r\n    generateJWK: async () => {\r\n        const jwk = await generateJWK()\r\n        return jwk\r\n    },\r\n\r\n    // API from https://github.com/th8ta/ArConnect/blob/main/src/scripts/injected.ts\r\n    async connect(\r\n        permissions: PermissionType[],\r\n        appInfo: { name?: string; logo?: string } = {}\r\n    ) {\r\n        storedPermissions = permissions\r\n        // I don't get why this step is needed, we will confirm each signature anyway\r\n        // skip it\r\n        // alert('ar handler connect');\r\n        return true\r\n    },\r\n\r\n    async disconnect() {\r\n        return true\r\n    },\r\n    async getActiveAddress() {\r\n        try {\r\n            let jwk\r\n\r\n            // find the RSA key\r\n            rsa.forEach((value, key, map) => {\r\n                if (value.kty == \"RSA\") {\r\n                    jwk = value\r\n                }\r\n            })\r\n            const addr = await ownerToAddress(jwk.n)\r\n            return addr as string\r\n        } catch (e) {\r\n            throw new Error(e)\r\n        }\r\n    },\r\n    async getActivePublicKey() {\r\n        // TODO\r\n    },\r\n    async getAllAddresses() {\r\n        // TODO\r\n    },\r\n    async getWalletNames(): Promise<{ [addr: string]: string }> {\r\n        // TODO\r\n    },\r\n    async addToken(id: string): Promise<void> {\r\n        // TODO\r\n    },\r\n    async sign(\r\n        transaction: Transaction,\r\n        options?: SignatureOptions\r\n    ): Promise<Signature> {\r\n        const methodName = \"arweaveWalletAPI.sign\"\r\n        let confirmed = await getConfig().confirm(methodName, transaction)\r\n        if (!confirmed) return false\r\n\r\n        const address = await arweaveWalletAPI.getActiveAddress()\r\n        // get keys\r\n        let jwk\r\n\r\n        // TODO: Temporary: only works with a single key\r\n        rsa.forEach((value, key, map) => {\r\n            if (value.kty == \"RSA\" && value?.kid == address) {\r\n                jwk = value\r\n            }\r\n        })\r\n\r\n        // pull out RSA matching jwk.n\r\n        let tx = new Transaction(transaction)\r\n        tx.setOwner(jwk.n)\r\n        let dataToSign = await tx.getSignatureData()\r\n\r\n        const rawSignature = await subtleSign(jwk, dataToSign, options)\r\n        let id = await crypto.subtle.digest(\"SHA-256\", rawSignature)\r\n\r\n        tx.setSignature({\r\n            id: ArweaveUtils.bufferTob64Url(id),\r\n            owner: jwk.n,\r\n            signature: ArweaveUtils.bufferTob64Url(rawSignature),\r\n        })\r\n\r\n        return tx\r\n    },\r\n    async getPermissions(): Promise<PermissionType[]> {\r\n        const permissions: PermissionType[] = storedPermissions\r\n        return permissions\r\n    },\r\n    async getArweaveConfig(): Promise<IArweave> {\r\n        // TODO\r\n    },\r\n    async encrypt(\r\n        data: string,\r\n        options: {\r\n            algorithm: string\r\n            hash: string\r\n            salt?: string\r\n        }\r\n    ): Promise<Uint8Array> {\r\n        // TODO\r\n    },\r\n    async decrypt(\r\n        data: Uint8Array,\r\n        options: {\r\n            algorithm: string\r\n            hash: string\r\n            salt?: string\r\n        }\r\n    ): Promise<string> {\r\n        // TODO\r\n    },\r\n    async signature(data: Uint8Array, algorithm: any): Promise<string> {\r\n        // TODO\r\n    },\r\n    noop(): bool {\r\n        return true\r\n    },\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        arweaveWallet: typeof arweaveWalletAPI\r\n    }\r\n    interface WindowEventMap {\r\n        walletSwitch: CustomEvent<{ address: string }>\r\n        arweaveWalletLoaded: CustomEvent<{}>\r\n    }\r\n}\r\n","import { getWallet } from '@peerpiper/wasm-wallet-bindings';\r\nimport { publicKeyJwkFromPublicKey } from '../handlers/ed25519/utils';\r\nimport { generateJWK, jwkToCryptoKey } from '../handlers/arweave';\r\n\r\nexport const DEFAULT_PROXCRYPTOR_NAME = 'DEFAULT_PROXCRYPTOR_NAME';\r\nexport const pre = new Map();\r\nexport const rsa = new Map();\r\nexport let keys = new Map();\r\n\r\nexport const DEFAULT_NAME = 'Master Key';\r\nexport const DEFAULT_RSA_NAME = 'Arweave_1';\r\n\r\nexport let wallet;\r\n\r\nloadWallet(); // premptively load it\r\n\r\nfunction browser() {\r\n\t// @ts-ignore\r\n\treturn ![(typeof window, typeof document)].includes('undefined');\r\n}\r\n\r\nasync function loadWallet() {\r\n\tif (!browser()) return; // skip non-browser enviroments\r\n\tconst resolved = await getWallet();\r\n\twallet = resolved;\r\n}\r\n\r\nexport async function assertWallet() {\r\n\tif (!wallet) await wallet;\r\n}\r\n\r\nlet config: { [Key: string]: any } = {};\r\n\r\nexport const setConfig = (key: string, value: any) => {\r\n\tconfig[key] = value;\r\n};\r\n\r\nexport const getConfig = () => {\r\n\treturn config;\r\n};\r\n\r\nexport const generateMnemonic = async function () {\r\n\tawait assertWallet();\r\n\treturn wallet.generate_mnemonic();\r\n};\r\n\r\nexport const generateRsaJwk = function () {\r\n\tconst jwk = generateJWK();\r\n\trsa.set(DEFAULT_RSA_NAME, jwk);\r\n\treturn jwk;\r\n};\r\n\r\nexport const loadSecrets = async function ({ mnemonic, rsajwk }) {\r\n\trsa.set(DEFAULT_RSA_NAME, rsajwk);\r\n\tawait loadMnemonicInProxcryptor(mnemonic);\r\n\t// also pass keypair to create a Provider\r\n};\r\n\r\nexport const loadMnemonicInProxcryptor = async function (\r\n\tmnemonic: string,\r\n\tpre_name?: string = DEFAULT_NAME\r\n): string {\r\n\tawait assertWallet();\r\n\tconst proxcryptor = wallet.mnemonic_to_proxcryptor(mnemonic);\r\n\tpre.set(pre_name, proxcryptor);\r\n\treturn pre_name;\r\n};\r\n\r\nexport const getLoadedKeys = (): {\r\n\tname: string;\r\n\tpublicKey: string; // todo: to UInt8Array?\r\n\tpublicKeyJWK: {\r\n\t\tkty: string;\r\n\t\tkid: string;\r\n\t\te: string; //'AQAB'; //  value 65537, the octet sequence to be base64url-encoded MUST consist of the three octets [1, 0, 1]; the resulting representation for this value is \"AQAB\"\r\n\t\tn: string; // keyDetails.n;\r\n\t}; // already a JWK\r\n\tpublicKeyBase58: string; // address = base64URL encoded hash of jwk.n\r\n}[] => {\r\n\tlet results = [];\r\n\r\n\tpre.forEach((proxcryptor, pre_name) => {\r\n\t\tresults.push({\r\n\t\t\tname: pre_name,\r\n\t\t\tpublicKey: proxcryptor.public_key(),\r\n\t\t\tpublicKeyJWK: proxcryptor.public_key_jwk(),\r\n\t\t\tpublicKeyBase58: proxcryptor.public_key_base58()\r\n\t\t});\r\n\t});\r\n\r\n\t// and now for RSA keytype\r\n\trsa.forEach((keyDetails, nickname) => {\r\n\t\tresults.push({\r\n\t\t\tname: nickname,\r\n\t\t\tpublicKey: keyDetails.n, // todo: to UInt8Array?\r\n\t\t\tpublicKeyJWK: {\r\n\t\t\t\tkty: 'RSA',\r\n\t\t\t\tkid: keyDetails.kid,\r\n\t\t\t\te: 'AQAB', //  value 65537, the octet sequence to be base64url-encoded MUST consist of the three octets [1, 0, 1]; the resulting representation for this value is \"AQAB\"\r\n\t\t\t\tn: keyDetails.n\r\n\t\t\t}, // already a JWK\r\n\t\t\tpublicKeyBase58: null // address = base64URL encoded hash of jwk.n\r\n\t\t});\r\n\t});\r\n\r\n\treturn results;\r\n};\r\n","import { pre, DEFAULT_NAME, wallet } from '../../internal/index';\r\nimport { getConfig } from '../index';\r\n\r\nimport type { Proxcryptor, EncryptedMessage, ReKey, ReEncryptedMessage } from './types';\r\n\r\nconst textDecoder = new TextDecoder();\r\n\r\nlet connected = true; // TODO: implement connect logic\r\n\r\nfunction assertReady() {\r\n\treturn connected ? true : false;\r\n}\r\n\r\nexport type { Proxcryptor };\r\nexport const proxcryptor: Proxcryptor = {\r\n\tselfEncrypt: (data: Uint8Array, tag: Uint8Array, pre_name: string = DEFAULT_NAME) => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!(pre && pre_name && pre.get(pre_name)))\r\n\t\t\treturn new Error('No proxy encryptor available for this name.');\r\n\t\tlet encrypted_message = pre.get(pre_name).self_encrypt(data, tag); // data, tag\r\n\t\treturn encrypted_message;\r\n\t},\r\n\r\n\tselfDecrypt: async (encryptedMessage: EncryptedMessage, pre_name: string = DEFAULT_NAME) => {\r\n\t\tconst methodName = 'proxcryptor.selfDecrypt';\r\n\t\tconst args = { tag: new Uint8Array(encryptedMessage.tag) }; // textDecoder.decode()\r\n\r\n\t\tconst config = getConfig();\r\n\t\tlet confirmed = await config.confirm(methodName, args);\r\n\t\tif (!confirmed) return false;\r\n\t\t{\r\n\t\t\tlet decrypted_message = pre.get(pre_name).self_decrypt(encryptedMessage); // data, tag\r\n\t\t\treturn decrypted_message;\r\n\t\t}\r\n\t},\r\n\r\n\tgenerateReKey: async (\r\n\t\ttargetPublicKey: Uint8Array,\r\n\t\ttag: string,\r\n\t\tpre_name: string = DEFAULT_NAME\r\n\t): Promise<ReKey> => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!(pre && pre_name && pre.get(pre_name)))\r\n\t\t\treturn new Error('No proxy encryptor available for this name.');\r\n\r\n\t\tconst methodName = 'proxcryptor.generateReKey';\r\n\t\tconst args = { tag, targetPublicKey }; // textDecoder.decode()\r\n\r\n\t\tconst config = getConfig();\r\n\t\tlet confirmed = await config.confirm(methodName, args);\r\n\t\tif (!confirmed) return false;\r\n\r\n\t\tlet re_key = pre.get(pre_name).generate_re_key(targetPublicKey, tag);\r\n\t\treturn re_key;\r\n\t},\r\n\r\n\treEncrypt: async (\r\n\t\ttargetPublicKey: Uint8Array,\r\n\t\tencrypted_message: EncryptedMessage,\r\n\t\tre_key: ReKey\r\n\t): Promise<ReEncryptedMessage> => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!wallet) return new Error('No wallet encryptor available');\r\n\r\n\t\tconst methodName = 'proxcryptor.reEncrypt';\r\n\t\tconst args = { tag: encrypted_message.tag, targetPublicKey }; // textDecoder.decode()\r\n\r\n\t\tconst config = getConfig();\r\n\t\tlet confirmed = await config.confirm(methodName, args);\r\n\t\tif (!confirmed) return false;\r\n\r\n\t\tlet re_encrypted_message = wallet.re_encrypt(targetPublicKey, encrypted_message, re_key);\r\n\t\treturn re_encrypted_message;\r\n\t},\r\n\r\n\ttransformTagKey: async (\r\n\t\ttargetPublicKey: Uint8Array,\r\n\t\ttag: string,\r\n\t\tencrypted_message: EncryptedMessage,\r\n\t\tpre_name: string = DEFAULT_NAME\r\n\t): Promise<ReKey> => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!(pre && pre_name && pre.get(pre_name)))\r\n\t\t\treturn new Error('No proxy encryptor available for this name.');\r\n\r\n\t\tconst methodName = 'proxcryptor.transformTagKey';\r\n\t\tconst args = { tag, targetPublicKey }; // textDecoder.decode()\r\n\r\n\t\tconst config = getConfig();\r\n\t\tlet confirmed = await config.confirm(methodName, args);\r\n\t\tif (!confirmed) return false;\r\n\r\n\t\tlet re_key = pre.get(pre_name).generate_re_key(targetPublicKey, tag);\r\n\t\tlet re_encrypted_message = wallet.re_encrypt(targetPublicKey, encrypted_message, re_key);\r\n\t\treturn re_encrypted_message;\r\n\t},\r\n\r\n\treDecrypt: async (\r\n\t\tre_encrypted_message: ReEncryptedMessage,\r\n\t\tpre_name: string = DEFAULT_NAME\r\n\t): Uint8Array | Error => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!(pre && pre_name && pre.get(pre_name)))\r\n\t\t\treturn new Error('No proxy encryptor available for this name.');\r\n\r\n\t\tconst methodName = 'proxcryptor.reDecrypt';\r\n\t\tconst args = {}; // textDecoder.decode()\r\n\r\n\t\tconst config = getConfig();\r\n\t\tlet confirmed = await config.confirm(methodName, args);\r\n\t\tif (!confirmed) return false;\r\n\r\n\t\tlet decrypted = pre.get(pre_name).re_decrypt(re_encrypted_message);\r\n\t\treturn new Uint8Array(decrypted);\r\n\t},\r\n\tgetPublicKey: (pre_name?: string = DEFAULT_NAME): Uint8Array | Error => {\r\n\t\tif (!assertReady())\r\n\t\t\treturn new Error(\r\n\t\t\t\t'Wallet not connected or initialized. Run connect() and await initialize() first.'\r\n\t\t\t);\r\n\t\tif (!pre || !pre_name || !pre.get(pre_name))\r\n\t\t\treturn new Error(`No proxy encryptor available for name ${pre_name}.`);\r\n\t\tlet publicKey = pre.get(pre_name).public_key();\r\n\t\tif (publicKey.length == 32) return publicKey;\r\n\t\treturn false;\r\n\t}\r\n};\r\n","export function alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return globalThis.Buffer.alloc(size);\n  }\n  return new Uint8Array(size);\n}\nexport function allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return globalThis.Buffer.allocUnsafe(size);\n  }\n  return new Uint8Array(size);\n}","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = data => {\n  const code = varint.decode(data);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;","import bases from './util/bases.js';\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n    return (a + b) | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n    return (a - b) | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n    return x << n | x >>> (32 - n);\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n    return x << (32 - n) | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);\n};\n//# sourceMappingURL=int.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\nvar int_1 = require(\"@stablelib/int\");\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;\n}\nexports.readInt16BE = readInt16BE;\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;\n}\nexports.readUint16BE = readUint16BE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;\n}\nexports.readInt16LE = readInt16LE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 1] << 8) | array[offset]) >>> 0;\n}\nexports.readUint16LE = readUint16LE;\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\nexports.writeUint16BE = writeUint16BE;\nexports.writeInt16BE = writeUint16BE;\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\nexports.writeUint16LE = writeUint16LE;\nexports.writeInt16LE = writeUint16LE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3];\n}\nexports.readInt32BE = readInt32BE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\nexports.readUint32BE = readUint32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset];\n}\nexports.readInt32LE = readInt32LE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset]) >>> 0;\n}\nexports.readUint32LE = readUint32LE;\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\nexports.writeUint32BE = writeUint32BE;\nexports.writeInt32BE = writeUint32BE;\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\nexports.writeUint32LE = writeUint32LE;\nexports.writeInt32LE = writeUint32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readInt32BE(array, offset);\n    var lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64BE = readInt64BE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readUint32BE(array, offset);\n    var lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64BE = readUint64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readInt32LE(array, offset);\n    var hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64LE = readInt64LE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readUint32LE(array, offset);\n    var hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64LE = readUint64LE;\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64BE = writeUint64BE;\nexports.writeInt64BE = writeUint64BE;\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64LE = writeUint64LE;\nexports.writeInt64LE = writeUint64LE;\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintBE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintBE = readUintBE;\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintLE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintLE = readUintLE;\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintBE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintBE = writeUintBE;\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintLE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintLE = writeUintLE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\nexports.readFloat32BE = readFloat32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\nexports.readFloat32LE = readFloat32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\nexports.readFloat64BE = readFloat64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\nexports.readFloat64LE = readFloat64LE;\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\nexports.writeFloat32BE = writeFloat32BE;\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\nexports.writeFloat32LE = writeFloat32LE;\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\nexports.writeFloat64BE = writeFloat64BE;\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\nexports.writeFloat64LE = writeFloat64LE;\n//# sourceMappingURL=binary.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */\nfunction wipe(array) {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n    return array;\n}\nexports.wipe = wipe;\n//# sourceMappingURL=wipe.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nvar SHA256 = /** @class */ (function () {\n    function SHA256() {\n        /** Length of hash output */\n        this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._state = new Int32Array(8); // hash state\n        this._temp = new Int32Array(64); // temporary state\n        this._buffer = new Uint8Array(128); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA256.prototype._initState = function () {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    SHA256.prototype.reset = function () {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    SHA256.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._temp);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    SHA256.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    SHA256.prototype.finish = function (out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this._buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (var i = 0; i < this.digestLength / 4; i++) {\n            binary_1.writeUint32BE(this._state[i], out, i * 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */\n    SHA256.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    SHA256.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    SHA256.prototype.restoreState = function (savedState) {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */\n    SHA256.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA256;\n}());\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    while (len >= 64) {\n        var a = v[0];\n        var b = v[1];\n        var c = v[2];\n        var d = v[3];\n        var e = v[4];\n        var f = v[5];\n        var g = v[6];\n        var h = v[7];\n        for (var i = 0; i < 16; i++) {\n            var j = pos + i * 4;\n            w[i] = binary_1.readUint32BE(p, j);\n        }\n        for (var i = 16; i < 64; i++) {\n            var u = w[i - 2];\n            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (var i = 0; i < 64; i++) {\n            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA256();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=sha256.js.map","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","export default {}","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes)\n    return this.rand.getBytes(n);\n\n  var res = new Uint8Array(n);\n  for (var i = 0; i < res.length; i++)\n    res[i] = this.rand.getByte();\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n\n  // Safari's WebWorkers do not have `crypto`\n  } else if (typeof window === 'object') {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var crypto = require('crypto');\n    if (typeof crypto.randomBytes !== 'function')\n      throw new Error('Not supported');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n  }\n}\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis,\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 },\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n      // Clean-up references to points and coefficients\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul),\n      },\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1),\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1),\n    },\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point)),\n    },\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate),\n      },\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  var i;\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  var e;\n  var h;\n  var j;\n  if (this.curve.twisted) {\n    // E = a * C\n    e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      h = this.z.redSqr();\n      // J = F - 2 * H\n      j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    e = c.redAdd(d);\n    // H = (c * Z1)^2\n    h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n    this.y,\n    this.z,\n    this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',\n      ],\n    ],\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',\n      ],\n    ],\n  },\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve,\n      });\n      return curve;\n    },\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n  ],\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n  ],\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9',\n  ],\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658',\n  ],\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3',\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15',\n    },\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre,\n  ],\n});\n","'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(Object.prototype.hasOwnProperty.call(curves, options),\n      'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray(),\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  for (;;) {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  }\n};\n\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; ; iter++) {\n    var k = options.k ?\n      options.k(iter) :\n      new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n  var p;\n\n  if (!this.curve._maxwellTrick) {\n    p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QUOTA = 65536;\nvar BrowserRandomSource = /** @class */ (function () {\n    function BrowserRandomSource() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        var browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || self.msCrypto) // IE11 has msCrypto\n            : null;\n        if (browserCrypto && browserCrypto.getRandomValues) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n    BrowserRandomSource.prototype.randomBytes = function (length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        var out = new Uint8Array(length);\n        for (var i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    };\n    return BrowserRandomSource;\n}());\nexports.BrowserRandomSource = BrowserRandomSource;\n//# sourceMappingURL=browser.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar NodeRandomSource = /** @class */ (function () {\n    function NodeRandomSource() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (typeof require !== \"undefined\") {\n            var nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    NodeRandomSource.prototype.randomBytes = function (length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        var buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        var out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for (var i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        wipe_1.wipe(buffer);\n        return out;\n    };\n    return NodeRandomSource;\n}());\nexports.NodeRandomSource = NodeRandomSource;\n//# sourceMappingURL=node.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser_1 = require(\"./browser\");\nvar node_1 = require(\"./node\");\nvar SystemRandomSource = /** @class */ (function () {\n    function SystemRandomSource() {\n        this.isAvailable = false;\n        this.name = \"\";\n        // Try browser.\n        this._source = new browser_1.BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n        // If no browser source, try Node.\n        this._source = new node_1.NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n        // No sources, we're out of options.\n    }\n    SystemRandomSource.prototype.randomBytes = function (length) {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    };\n    return SystemRandomSource;\n}());\nexports.SystemRandomSource = SystemRandomSource;\n//# sourceMappingURL=system.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar system_1 = require(\"./source/system\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng) {\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    // Generate 4-byte random buffer.\n    var buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    var result = binary_1.readUint32LE(buf);\n    // Clean the buffer.\n    wipe_1.wipe(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nvar ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    var out = '';\n    var charsLen = charset.length;\n    var maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (var i = 0; i < buf.length && length > 0; i++) {\n            var randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe_1.wipe(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset, prng) {\n    if (charset === void 0) { charset = ALPHANUMERIC; }\n    if (prng === void 0) { prng = exports.defaultRandomSource; }\n    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;\n//# sourceMappingURL=random.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 64;\nexports.BLOCK_SIZE = 128;\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */\nvar SHA512 = /** @class */ (function () {\n    function SHA512() {\n        /** Length of hash output */\n        this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._stateHi = new Int32Array(8); // hash state, high bytes\n        this._stateLo = new Int32Array(8); // hash state, low bytes\n        this._tempHi = new Int32Array(16); // temporary state, high bytes\n        this._tempLo = new Int32Array(16); // temporary state, low bytes\n        this._buffer = new Uint8Array(256); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA512.prototype._initState = function () {\n        this._stateHi[0] = 0x6a09e667;\n        this._stateHi[1] = 0xbb67ae85;\n        this._stateHi[2] = 0x3c6ef372;\n        this._stateHi[3] = 0xa54ff53a;\n        this._stateHi[4] = 0x510e527f;\n        this._stateHi[5] = 0x9b05688c;\n        this._stateHi[6] = 0x1f83d9ab;\n        this._stateHi[7] = 0x5be0cd19;\n        this._stateLo[0] = 0xf3bcc908;\n        this._stateLo[1] = 0x84caa73b;\n        this._stateLo[2] = 0xfe94f82b;\n        this._stateLo[3] = 0x5f1d36f1;\n        this._stateLo[4] = 0xade682d1;\n        this._stateLo[5] = 0x2b3e6c1f;\n        this._stateLo[6] = 0xfb41bd6b;\n        this._stateLo[7] = 0x137e2179;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    SHA512.prototype.reset = function () {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    SHA512.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._tempHi);\n        wipe_1.wipe(this._tempLo);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    SHA512.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"SHA512: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    SHA512.prototype.finish = function (out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 128 < 112) ? 128 : 256;\n            this._buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (var i = 0; i < this.digestLength / 8; i++) {\n            binary_1.writeUint32BE(this._stateHi[i], out, i * 8);\n            binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */\n    SHA512.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n     * used with restoreState(). Only chain value is saved, not buffers or\n     * other state variables.\n     */\n    SHA512.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            stateHi: new Int32Array(this._stateHi),\n            stateLo: new Int32Array(this._stateLo),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n     * saveState() and sets bytesHashed to the given value.\n     */\n    SHA512.prototype.restoreState = function (savedState) {\n        this._stateHi.set(savedState.stateHi);\n        this._stateLo.set(savedState.stateLo);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */\n    SHA512.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.stateHi);\n        wipe_1.wipe(savedState.stateLo);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA512;\n}());\nexports.SHA512 = SHA512;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]);\nfunction hashBlocks(wh, wl, hh, hl, m, pos, len) {\n    var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n    var h, l;\n    var th, tl;\n    var a, b, c, d;\n    while (len >= 128) {\n        for (var i = 0; i < 16; i++) {\n            var j = 8 * i + pos;\n            wh[i] = binary_1.readUint32BE(m, j);\n            wl[i] = binary_1.readUint32BE(m, j + 4);\n        }\n        for (var i = 0; i < 80; i++) {\n            var bh0 = ah0;\n            var bh1 = ah1;\n            var bh2 = ah2;\n            var bh3 = ah3;\n            var bh4 = ah4;\n            var bh5 = ah5;\n            var bh6 = ah6;\n            var bh7 = ah7;\n            var bl0 = al0;\n            var bl1 = al1;\n            var bl2 = al2;\n            var bl3 = al3;\n            var bl4 = al4;\n            var bl5 = al5;\n            var bl6 = al6;\n            var bl7 = al7;\n            // add\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma1\n            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) |\n                (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));\n            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) |\n                (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Ch\n            h = (ah4 & ah5) ^ (~ah4 & ah6);\n            l = (al4 & al5) ^ (~al4 & al6);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // K\n            h = K[i * 2];\n            l = K[i * 2 + 1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n            // add\n            h = th;\n            l = tl;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma0\n            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) |\n                (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));\n            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) |\n                (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Maj\n            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh7 = (c & 0xffff) | (d << 16);\n            bl7 = (a & 0xffff) | (b << 16);\n            // add\n            h = bh3;\n            l = bl3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = th;\n            l = tl;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh3 = (c & 0xffff) | (d << 16);\n            bl3 = (a & 0xffff) | (b << 16);\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n            if (i % 16 === 15) {\n                for (var j = 0; j < 16; j++) {\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) |\n                        (tl << (32 - 8))) ^ (th >>> 7);\n                    l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) |\n                        (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) |\n                        (th << (32 - (61 - 32)))) ^ (th >>> 6);\n                    l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) |\n                        (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    wh[j] = (c & 0xffff) | (d << 16);\n                    wl[j] = (a & 0xffff) | (b << 16);\n                }\n            }\n        }\n        // add\n        h = ah0;\n        l = al0;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[0];\n        l = hl[0];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[0] = ah0 = (c & 0xffff) | (d << 16);\n        hl[0] = al0 = (a & 0xffff) | (b << 16);\n        h = ah1;\n        l = al1;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[1];\n        l = hl[1];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[1] = ah1 = (c & 0xffff) | (d << 16);\n        hl[1] = al1 = (a & 0xffff) | (b << 16);\n        h = ah2;\n        l = al2;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[2];\n        l = hl[2];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[2] = ah2 = (c & 0xffff) | (d << 16);\n        hl[2] = al2 = (a & 0xffff) | (b << 16);\n        h = ah3;\n        l = al3;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[3];\n        l = hl[3];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[3] = ah3 = (c & 0xffff) | (d << 16);\n        hl[3] = al3 = (a & 0xffff) | (b << 16);\n        h = ah4;\n        l = al4;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[4];\n        l = hl[4];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[4] = ah4 = (c & 0xffff) | (d << 16);\n        hl[4] = al4 = (a & 0xffff) | (b << 16);\n        h = ah5;\n        l = al5;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[5];\n        l = hl[5];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[5] = ah5 = (c & 0xffff) | (d << 16);\n        hl[5] = al5 = (a & 0xffff) | (b << 16);\n        h = ah6;\n        l = al6;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[6];\n        l = hl[6];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[6] = ah6 = (c & 0xffff) | (d << 16);\n        hl[6] = al6 = (a & 0xffff) | (b << 16);\n        h = ah7;\n        l = al7;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[7];\n        l = hl[7];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[7] = ah7 = (c & 0xffff) | (d << 16);\n        hl[7] = al7 = (a & 0xffff) | (b << 16);\n        pos += 128;\n        len -= 128;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA512();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=sha512.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package ed25519 implements Ed25519 public-key signature algorithm.\n */\nvar random_1 = require(\"@stablelib/random\");\nvar sha512_1 = require(\"@stablelib/sha512\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.SIGNATURE_LENGTH = 64;\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 64;\nexports.SEED_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    var r = new Float64Array(16);\n    if (init) {\n        for (var i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nvar _9 = new Uint8Array(32);\n_9[0] = 9;\nvar gf0 = gf();\nvar gf1 = gf([1]);\nvar D = gf([\n    0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,\n    0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203\n]);\nvar D2 = gf([\n    0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,\n    0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406\n]);\nvar X = gf([\n    0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,\n    0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169\n]);\nvar Y = gf([\n    0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,\n    0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666\n]);\nvar I = gf([\n    0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,\n    0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83\n]);\nfunction set25519(r, a) {\n    for (var i = 0; i < 16; i++) {\n        r[i] = a[i] | 0;\n    }\n}\nfunction car25519(o) {\n    var c = 1;\n    for (var i = 0; i < 16; i++) {\n        var v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    var c = ~(b - 1);\n    for (var i = 0; i < 16; i++) {\n        var t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    var m = gf();\n    var t = gf();\n    for (var i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (var j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (var i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        var b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (var i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction verify32(x, y) {\n    var d = 0;\n    for (var i = 0; i < 32; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >>> 8)) - 1;\n}\nfunction neq25519(a, b) {\n    var c = new Uint8Array(32);\n    var d = new Uint8Array(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return verify32(c, d);\n}\nfunction par25519(a) {\n    var d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nfunction unpack25519(o, n) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, i) {\n    var c = gf();\n    var a;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 253; a >= 0; a--) {\n        square(c, c);\n        if (a !== 2 && a !== 4) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\nfunction pow2523(o, i) {\n    var c = gf();\n    var a;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 250; a >= 0; a--) {\n        square(c, c);\n        if (a !== 1) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\nfunction edadd(p, q) {\n    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    sub(a, p[1], p[0]);\n    sub(t, q[1], q[0]);\n    mul(a, a, t);\n    add(b, p[0], p[1]);\n    add(t, q[0], q[1]);\n    mul(b, b, t);\n    mul(c, p[3], q[3]);\n    mul(c, c, D2);\n    mul(d, p[2], q[2]);\n    add(d, d, d);\n    sub(e, b, a);\n    sub(f, d, c);\n    add(g, d, c);\n    add(h, b, a);\n    mul(p[0], e, f);\n    mul(p[1], h, g);\n    mul(p[2], g, f);\n    mul(p[3], e, h);\n}\nfunction cswap(p, q, b) {\n    for (var i = 0; i < 4; i++) {\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction pack(r, p) {\n    var tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    mul(tx, p[0], zi);\n    mul(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction scalarmult(p, q, s) {\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for (var i = 255; i >= 0; --i) {\n        var b = (s[(i / 8) | 0] >> (i & 7)) & 1;\n        cswap(p, q, b);\n        edadd(q, p);\n        edadd(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction scalarbase(p, s) {\n    var q = [gf(), gf(), gf(), gf()];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    mul(q[3], X, Y);\n    scalarmult(p, q, s);\n}\n// Generates key pair from secret 32-byte seed.\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SEED_LENGTH) {\n        throw new Error(\"ed25519: seed must be \" + exports.SEED_LENGTH + \" bytes\");\n    }\n    var d = sha512_1.hash(seed);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    var publicKey = new Uint8Array(32);\n    var p = [gf(), gf(), gf(), gf()];\n    scalarbase(p, d);\n    pack(publicKey, p);\n    var secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return {\n        publicKey: publicKey,\n        secretKey: secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    var seed = random_1.randomBytes(32, prng);\n    var result = generateKeyPairFromSeed(seed);\n    wipe_1.wipe(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\nfunction extractPublicKeyFromSecretKey(secretKey) {\n    if (secretKey.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(\"ed25519: secret key must be \" + exports.SECRET_KEY_LENGTH + \" bytes\");\n    }\n    return new Uint8Array(secretKey.subarray(32));\n}\nexports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;\nvar L = new Float64Array([\n    0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2,\n    0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10\n]);\nfunction modL(r, x) {\n    var carry;\n    var i;\n    var j;\n    var k;\n    for (i = 63; i >= 32; --i) {\n        carry = 0;\n        for (j = i - 32, k = i - 12; j < k; ++j) {\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = Math.floor((x[j] + 128) / 256);\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (j = 0; j < 32; j++) {\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for (j = 0; j < 32; j++) {\n        x[j] -= carry * L[j];\n    }\n    for (i = 0; i < 32; i++) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction reduce(r) {\n    var x = new Float64Array(64);\n    for (var i = 0; i < 64; i++) {\n        x[i] = r[i];\n    }\n    for (var i = 0; i < 64; i++) {\n        r[i] = 0;\n    }\n    modL(r, x);\n}\n// Returns 64-byte signature of the message under the 64-byte secret key.\nfunction sign(secretKey, message) {\n    var x = new Float64Array(64);\n    var p = [gf(), gf(), gf(), gf()];\n    var d = sha512_1.hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    var signature = new Uint8Array(64);\n    signature.set(d.subarray(32), 32);\n    var hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(32));\n    hs.update(message);\n    var r = hs.digest();\n    hs.clean();\n    reduce(r);\n    scalarbase(p, r);\n    pack(signature, p);\n    hs.reset();\n    hs.update(signature.subarray(0, 32));\n    hs.update(secretKey.subarray(32));\n    hs.update(message);\n    var h = hs.digest();\n    reduce(h);\n    for (var i = 0; i < 32; i++) {\n        x[i] = r[i];\n    }\n    for (var i = 0; i < 32; i++) {\n        for (var j = 0; j < 32; j++) {\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(signature.subarray(32), x);\n    return signature;\n}\nexports.sign = sign;\nfunction unpackneg(r, p) {\n    var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    square(num, r[1]);\n    mul(den, num, D);\n    sub(num, num, r[2]);\n    add(den, r[2], den);\n    square(den2, den);\n    square(den4, den2);\n    mul(den6, den4, den2);\n    mul(t, den6, num);\n    mul(t, t, den);\n    pow2523(t, t);\n    mul(t, t, num);\n    mul(t, t, den);\n    mul(t, t, den);\n    mul(r[0], t, den);\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        mul(r[0], r[0], I);\n    }\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        return -1;\n    }\n    if (par25519(r[0]) === (p[31] >> 7)) {\n        sub(r[0], gf0, r[0]);\n    }\n    mul(r[3], r[0], r[1]);\n    return 0;\n}\nfunction verify(publicKey, message, signature) {\n    var t = new Uint8Array(32);\n    var p = [gf(), gf(), gf(), gf()];\n    var q = [gf(), gf(), gf(), gf()];\n    if (signature.length !== exports.SIGNATURE_LENGTH) {\n        throw new Error(\"ed25519: signature must be \" + exports.SIGNATURE_LENGTH + \" bytes\");\n    }\n    if (unpackneg(q, publicKey)) {\n        return false;\n    }\n    var hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(0, 32));\n    hs.update(publicKey);\n    hs.update(message);\n    var h = hs.digest();\n    reduce(h);\n    scalarmult(p, q, h);\n    scalarbase(q, signature.subarray(32));\n    edadd(p, q);\n    pack(t, p);\n    if (verify32(signature, t)) {\n        return false;\n    }\n    return true;\n}\nexports.verify = verify;\n/**\n * Convert Ed25519 public key to X25519 public key.\n *\n * Throws if given an invalid public key.\n */\nfunction convertPublicKeyToX25519(publicKey) {\n    var q = [gf(), gf(), gf(), gf()];\n    if (unpackneg(q, publicKey)) {\n        throw new Error(\"Ed25519: invalid public key\");\n    }\n    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\n    var a = gf();\n    var b = gf();\n    var y = q[1];\n    add(a, gf1, y);\n    sub(b, gf1, y);\n    inv25519(b, b);\n    mul(a, a, b);\n    var z = new Uint8Array(32);\n    pack25519(z, a);\n    return z;\n}\nexports.convertPublicKeyToX25519 = convertPublicKeyToX25519;\n/**\n *  Convert Ed25519 secret (private) key to X25519 secret key.\n */\nfunction convertSecretKeyToX25519(secretKey) {\n    var d = sha512_1.hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    var o = new Uint8Array(d.subarray(0, 32));\n    wipe_1.wipe(d);\n    return o;\n}\nexports.convertSecretKeyToX25519 = convertSecretKeyToX25519;\n//# sourceMappingURL=ed25519.js.map","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bech32m = exports.bech32 = void 0;\nconst ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return 'Invalid prefix (' + prefix + ')';\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return 'Excess padding';\n        if ((value << (outBits - bits)) & maxV)\n            return 'Non-zero padding';\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === 'bech32') {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError('Exceeds length limit');\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            throw new Error(chk);\n        let result = prefix + '1';\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error('Non 5-bit word');\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + ' too short';\n        if (str.length > LIMIT)\n            return 'Exceeds length limit';\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return 'Mixed-case string ' + str;\n        str = lowered;\n        const split = str.lastIndexOf('1');\n        if (split === -1)\n            return 'No separator character for ' + str;\n        if (split === 0)\n            return 'Missing prefix for ' + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return 'Data too short';\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return 'Unknown character ' + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return 'Invalid checksum for ' + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nexports.bech32 = getLibraryFromEncoding('bech32');\nexports.bech32m = getLibraryFromEncoding('bech32m');\n","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package x25519 implements X25519 key agreement.\n */\nvar random_1 = require(\"@stablelib/random\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 32;\nexports.SHARED_KEY_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    var r = new Float64Array(16);\n    if (init) {\n        for (var i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nvar _9 = new Uint8Array(32);\n_9[0] = 9;\nvar _121665 = gf([0xdb41, 1]);\nfunction car25519(o) {\n    var c = 1;\n    for (var i = 0; i < 16; i++) {\n        var v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    var c = ~(b - 1);\n    for (var i = 0; i < 16; i++) {\n        var t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    var m = gf();\n    var t = gf();\n    for (var i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (var j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (var i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        var b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (var i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction unpack25519(o, n) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for (var i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, inp) {\n    var c = gf();\n    for (var i = 0; i < 16; i++) {\n        c[i] = inp[i];\n    }\n    for (var i = 253; i >= 0; i--) {\n        square(c, c);\n        if (i !== 2 && i !== 4) {\n            mul(c, c, inp);\n        }\n    }\n    for (var i = 0; i < 16; i++) {\n        o[i] = c[i];\n    }\n}\nfunction scalarMult(n, p) {\n    var z = new Uint8Array(32);\n    var x = new Float64Array(80);\n    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();\n    for (var i = 0; i < 31; i++) {\n        z[i] = n[i];\n    }\n    z[31] = (n[31] & 127) | 64;\n    z[0] &= 248;\n    unpack25519(x, p);\n    for (var i = 0; i < 16; i++) {\n        b[i] = x[i];\n    }\n    a[0] = d[0] = 1;\n    for (var i = 254; i >= 0; --i) {\n        var r = (z[i >>> 3] >>> (i & 7)) & 1;\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n        add(e, a, c);\n        sub(a, a, c);\n        add(c, b, d);\n        sub(b, b, d);\n        square(d, e);\n        square(f, a);\n        mul(a, c, a);\n        mul(c, b, e);\n        add(e, a, c);\n        sub(a, a, c);\n        square(b, a);\n        sub(c, d, f);\n        mul(a, c, _121665);\n        add(a, a, d);\n        mul(c, c, a);\n        mul(a, d, f);\n        mul(d, b, x);\n        square(b, e);\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n    }\n    for (var i = 0; i < 16; i++) {\n        x[i + 16] = a[i];\n        x[i + 32] = c[i];\n        x[i + 48] = b[i];\n        x[i + 64] = d[i];\n    }\n    var x32 = x.subarray(32);\n    var x16 = x.subarray(16);\n    inv25519(x32, x32);\n    mul(x16, x16, x32);\n    var q = new Uint8Array(32);\n    pack25519(q, x16);\n    return q;\n}\nexports.scalarMult = scalarMult;\nfunction scalarMultBase(n) {\n    return scalarMult(n, _9);\n}\nexports.scalarMultBase = scalarMultBase;\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(\"x25519: seed must be \" + exports.SECRET_KEY_LENGTH + \" bytes\");\n    }\n    var secretKey = new Uint8Array(seed);\n    var publicKey = scalarMultBase(secretKey);\n    return {\n        publicKey: publicKey,\n        secretKey: secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    var seed = random_1.randomBytes(32, prng);\n    var result = generateKeyPairFromSeed(seed);\n    wipe_1.wipe(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\n/**\n * Returns a shared key between our secret key and a peer's public key.\n *\n * Throws an error if the given keys are of wrong length.\n *\n * If rejectZero is true throws if the calculated shared key is all-zero.\n * From RFC 7748:\n *\n * > Protocol designers using Diffie-Hellman over the curves defined in\n * > this document must not assume \"contributory behavior\".  Specially,\n * > contributory behavior means that both parties' private keys\n * > contribute to the resulting shared key.  Since curve25519 and\n * > curve448 have cofactors of 8 and 4 (respectively), an input point of\n * > small order will eliminate any contribution from the other party's\n * > private key.  This situation can be detected by checking for the all-\n * > zero output, which implementations MAY do, as specified in Section 6.\n * > However, a large number of existing implementations do not do this.\n *\n * IMPORTANT: the returned key is a raw result of scalar multiplication.\n * To use it as a key material, hash it with a cryptographic hash function.\n */\nfunction sharedKey(mySecretKey, theirPublicKey, rejectZero) {\n    if (rejectZero === void 0) { rejectZero = false; }\n    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect secret key length\");\n    }\n    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect public key length\");\n    }\n    var result = scalarMult(mySecretKey, theirPublicKey);\n    if (rejectZero) {\n        var zeros = 0;\n        for (var i = 0; i < result.length; i++) {\n            zeros |= result[i];\n        }\n        if (zeros === 0) {\n            throw new Error(\"X25519: invalid shared key\");\n        }\n    }\n    return result;\n}\nexports.sharedKey = sharedKey;\n//# sourceMappingURL=x25519.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package chacha implements ChaCha stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out, input, key) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622D32; // \"2-by\"\n    var j3 = 0x6B206574; // \"te k\"\n    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];\n    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];\n    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];\n    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for (var i = 0; i < ROUNDS; i += 2) {\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n    }\n    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n    var nc;\n    var counterLength;\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    }\n    else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n    // Allocate temporary space for ChaCha block.\n    var block = new Uint8Array(64);\n    for (var i = 0; i < src.length; i += 64) {\n        // Generate a block.\n        core(block, nc, key);\n        // XOR block bytes with src into dst.\n        for (var j = i; j < i + 64 && j < src.length; j++) {\n            dst[j] = src[j] ^ block[j - i];\n        }\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n    // Cleanup temporary space.\n    wipe_1.wipe(block);\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe_1.wipe(nc);\n    }\n    return dst;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n    var carry = 1;\n    while (len--) {\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n}\n//# sourceMappingURL=chacha.js.map","\"use strict\";\n// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package xchacha20 implements XChaCha20 stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar chacha_1 = require(\"@stablelib/chacha\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n/**\n * Encrypt src with XChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Nonce length is set in such a way that given it's generated via a CSPRNG\n * then there's little concern of collision for roughly 2^96 messages while\n * reusing a secret key and not encountering nonce reuse vulnerabilities.\n */\nfunction streamXOR(key, nonce, src, dst) {\n    if (nonce.length !== 24) {\n        throw new Error(\"XChaCha20 nonce must be 24 bytes\");\n    }\n    // Use HChaCha one-way function to transform first 16 bytes of\n    // 24-byte extended nonce and key into a new key for Salsa\n    // stream -- \"subkey\".\n    var subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32));\n    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n    // and a subkey derived in the previous step as key to encrypt.\n    var modifiedNonce = new Uint8Array(12);\n    modifiedNonce.set(nonce.subarray(16), 4);\n    // If nonceInplaceCounterLength > 0, we'll still pass the correct\n    // nonce || counter, as we don't limit the end of nonce subarray.\n    var result = chacha_1.streamXOR(subkey, modifiedNonce, src, dst);\n    // Clean subkey.\n    wipe_1.wipe(subkey);\n    return result;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate XChaCha20 stream for the given 32-byte key and 12-byte\n * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)\n * and write it into dst and return it.\n *\n * Nonces MUST be generated using an CSPRNG to generate a sufficiently\n * random nonce such that a collision is highly unlikely to occur.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst) {\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst);\n}\nexports.stream = stream;\n/**\n * HChaCha is a one-way function used in XChaCha to extend nonce.\n *\n * It takes 32-byte key and 16-byte src and writes 32-byte result\n * into dst and returns it.\n */\nfunction hchacha(key, src, dst) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646e; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622d32; // \"2-by\"\n    var j3 = 0x6b206574; // \"te k\"\n    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    var j12 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];\n    var j13 = (src[7] << 24) | (src[6] << 16) | (src[5] << 8) | src[4];\n    var j14 = (src[11] << 24) | (src[10] << 16) | (src[9] << 8) | src[8];\n    var j15 = (src[15] << 24) | (src[14] << 16) | (src[13] << 8) | src[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for (var i = 0; i < ROUNDS; i += 2) {\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x2 = (x2 + x6) | 0;\n        x14 ^= x2;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x10 = (x10 + x14) | 0;\n        x6 ^= x10;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x3 = (x3 + x7) | 0;\n        x15 ^= x3;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x11 = (x11 + x15) | 0;\n        x7 ^= x11;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x1 = (x1 + x5) | 0;\n        x13 ^= x1;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x9 = (x9 + x13) | 0;\n        x5 ^= x9;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n        x0 = (x0 + x4) | 0;\n        x12 ^= x0;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x8 = (x8 + x12) | 0;\n        x4 ^= x8;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 16)) | (x15 << 16);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 12)) | (x5 << 12);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 16)) | (x12 << 16);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 12)) | (x6 << 12);\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 16)) | (x13 << 16);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 12)) | (x7 << 12);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 16)) | (x14 << 16);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 12)) | (x4 << 12);\n        x2 = (x2 + x7) | 0;\n        x13 ^= x2;\n        x13 = (x13 >>> (32 - 8)) | (x13 << 8);\n        x8 = (x8 + x13) | 0;\n        x7 ^= x8;\n        x7 = (x7 >>> (32 - 7)) | (x7 << 7);\n        x3 = (x3 + x4) | 0;\n        x14 ^= x3;\n        x14 = (x14 >>> (32 - 8)) | (x14 << 8);\n        x9 = (x9 + x14) | 0;\n        x4 ^= x9;\n        x4 = (x4 >>> (32 - 7)) | (x4 << 7);\n        x1 = (x1 + x6) | 0;\n        x12 ^= x1;\n        x12 = (x12 >>> (32 - 8)) | (x12 << 8);\n        x11 = (x11 + x12) | 0;\n        x6 ^= x11;\n        x6 = (x6 >>> (32 - 7)) | (x6 << 7);\n        x0 = (x0 + x5) | 0;\n        x15 ^= x0;\n        x15 = (x15 >>> (32 - 8)) | (x15 << 8);\n        x10 = (x10 + x15) | 0;\n        x5 ^= x10;\n        x5 = (x5 >>> (32 - 7)) | (x5 << 7);\n    }\n    binary_1.writeUint32LE(x0, dst, 0);\n    binary_1.writeUint32LE(x1, dst, 4);\n    binary_1.writeUint32LE(x2, dst, 8);\n    binary_1.writeUint32LE(x3, dst, 12);\n    binary_1.writeUint32LE(x12, dst, 16);\n    binary_1.writeUint32LE(x13, dst, 20);\n    binary_1.writeUint32LE(x14, dst, 24);\n    binary_1.writeUint32LE(x15, dst, 28);\n    return dst;\n}\nexports.hchacha = hchacha;\n//# sourceMappingURL=xchacha20.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package constant-time provides functions for performing algorithmically constant-time operations.\n */\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\nfunction select(subject, resultIfOne, resultIfZero) {\n    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);\n}\nexports.select = select;\n/**\n * Returns 1 if a <= b, or 0 if not.\n * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.\n */\nfunction lessOrEqual(a, b) {\n    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;\n}\nexports.lessOrEqual = lessOrEqual;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\nfunction compare(a, b) {\n    if (a.length !== b.length) {\n        return 0;\n    }\n    var result = 0;\n    for (var i = 0; i < a.length; i++) {\n        result |= a[i] ^ b[i];\n    }\n    return (1 & ((result - 1) >>> 8));\n}\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\nfunction equal(a, b) {\n    if (a.length === 0 || b.length === 0) {\n        return false;\n    }\n    return compare(a, b) !== 0;\n}\nexports.equal = equal;\n//# sourceMappingURL=constant-time.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package poly1305 implements Poly1305 one-time message authentication algorithm.\n */\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 16;\n// Port of Andrew Moon's Poly1305-donna-16. Public domain.\n// https://github.com/floodyberry/poly1305-donna\n/**\n * Poly1305 computes 16-byte authenticator of message using\n * a one-time 32-byte key.\n *\n * Important: key should be used for only one message,\n * it should never repeat.\n */\nvar Poly1305 = /** @class */ (function () {\n    function Poly1305(key) {\n        this.digestLength = exports.DIGEST_LENGTH;\n        this._buffer = new Uint8Array(16);\n        this._r = new Uint16Array(10);\n        this._h = new Uint16Array(10);\n        this._pad = new Uint16Array(8);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = false;\n        var t0 = key[0] | key[1] << 8;\n        this._r[0] = (t0) & 0x1fff;\n        var t1 = key[2] | key[3] << 8;\n        this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        var t2 = key[4] | key[5] << 8;\n        this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        var t3 = key[6] | key[7] << 8;\n        this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        var t4 = key[8] | key[9] << 8;\n        this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this._r[5] = ((t4 >>> 1)) & 0x1ffe;\n        var t5 = key[10] | key[11] << 8;\n        this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        var t6 = key[12] | key[13] << 8;\n        this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        var t7 = key[14] | key[15] << 8;\n        this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this._r[9] = ((t7 >>> 5)) & 0x007f;\n        this._pad[0] = key[16] | key[17] << 8;\n        this._pad[1] = key[18] | key[19] << 8;\n        this._pad[2] = key[20] | key[21] << 8;\n        this._pad[3] = key[22] | key[23] << 8;\n        this._pad[4] = key[24] | key[25] << 8;\n        this._pad[5] = key[26] | key[27] << 8;\n        this._pad[6] = key[28] | key[29] << 8;\n        this._pad[7] = key[30] | key[31] << 8;\n    }\n    Poly1305.prototype._blocks = function (m, mpos, bytes) {\n        var hibit = this._fin ? 0 : 1 << 11;\n        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];\n        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];\n        while (bytes >= 16) {\n            var t0 = m[mpos + 0] | m[mpos + 1] << 8;\n            h0 += (t0) & 0x1fff;\n            var t1 = m[mpos + 2] | m[mpos + 3] << 8;\n            h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n            var t2 = m[mpos + 4] | m[mpos + 5] << 8;\n            h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;\n            var t3 = m[mpos + 6] | m[mpos + 7] << 8;\n            h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n            var t4 = m[mpos + 8] | m[mpos + 9] << 8;\n            h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;\n            h5 += ((t4 >>> 1)) & 0x1fff;\n            var t5 = m[mpos + 10] | m[mpos + 11] << 8;\n            h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n            var t6 = m[mpos + 12] | m[mpos + 13] << 8;\n            h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;\n            var t7 = m[mpos + 14] | m[mpos + 15] << 8;\n            h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n            h9 += ((t7 >>> 5)) | hibit;\n            var c = 0;\n            var d0 = c;\n            d0 += h0 * r0;\n            d0 += h1 * (5 * r9);\n            d0 += h2 * (5 * r8);\n            d0 += h3 * (5 * r7);\n            d0 += h4 * (5 * r6);\n            c = (d0 >>> 13);\n            d0 &= 0x1fff;\n            d0 += h5 * (5 * r5);\n            d0 += h6 * (5 * r4);\n            d0 += h7 * (5 * r3);\n            d0 += h8 * (5 * r2);\n            d0 += h9 * (5 * r1);\n            c += (d0 >>> 13);\n            d0 &= 0x1fff;\n            var d1 = c;\n            d1 += h0 * r1;\n            d1 += h1 * r0;\n            d1 += h2 * (5 * r9);\n            d1 += h3 * (5 * r8);\n            d1 += h4 * (5 * r7);\n            c = (d1 >>> 13);\n            d1 &= 0x1fff;\n            d1 += h5 * (5 * r6);\n            d1 += h6 * (5 * r5);\n            d1 += h7 * (5 * r4);\n            d1 += h8 * (5 * r3);\n            d1 += h9 * (5 * r2);\n            c += (d1 >>> 13);\n            d1 &= 0x1fff;\n            var d2 = c;\n            d2 += h0 * r2;\n            d2 += h1 * r1;\n            d2 += h2 * r0;\n            d2 += h3 * (5 * r9);\n            d2 += h4 * (5 * r8);\n            c = (d2 >>> 13);\n            d2 &= 0x1fff;\n            d2 += h5 * (5 * r7);\n            d2 += h6 * (5 * r6);\n            d2 += h7 * (5 * r5);\n            d2 += h8 * (5 * r4);\n            d2 += h9 * (5 * r3);\n            c += (d2 >>> 13);\n            d2 &= 0x1fff;\n            var d3 = c;\n            d3 += h0 * r3;\n            d3 += h1 * r2;\n            d3 += h2 * r1;\n            d3 += h3 * r0;\n            d3 += h4 * (5 * r9);\n            c = (d3 >>> 13);\n            d3 &= 0x1fff;\n            d3 += h5 * (5 * r8);\n            d3 += h6 * (5 * r7);\n            d3 += h7 * (5 * r6);\n            d3 += h8 * (5 * r5);\n            d3 += h9 * (5 * r4);\n            c += (d3 >>> 13);\n            d3 &= 0x1fff;\n            var d4 = c;\n            d4 += h0 * r4;\n            d4 += h1 * r3;\n            d4 += h2 * r2;\n            d4 += h3 * r1;\n            d4 += h4 * r0;\n            c = (d4 >>> 13);\n            d4 &= 0x1fff;\n            d4 += h5 * (5 * r9);\n            d4 += h6 * (5 * r8);\n            d4 += h7 * (5 * r7);\n            d4 += h8 * (5 * r6);\n            d4 += h9 * (5 * r5);\n            c += (d4 >>> 13);\n            d4 &= 0x1fff;\n            var d5 = c;\n            d5 += h0 * r5;\n            d5 += h1 * r4;\n            d5 += h2 * r3;\n            d5 += h3 * r2;\n            d5 += h4 * r1;\n            c = (d5 >>> 13);\n            d5 &= 0x1fff;\n            d5 += h5 * r0;\n            d5 += h6 * (5 * r9);\n            d5 += h7 * (5 * r8);\n            d5 += h8 * (5 * r7);\n            d5 += h9 * (5 * r6);\n            c += (d5 >>> 13);\n            d5 &= 0x1fff;\n            var d6 = c;\n            d6 += h0 * r6;\n            d6 += h1 * r5;\n            d6 += h2 * r4;\n            d6 += h3 * r3;\n            d6 += h4 * r2;\n            c = (d6 >>> 13);\n            d6 &= 0x1fff;\n            d6 += h5 * r1;\n            d6 += h6 * r0;\n            d6 += h7 * (5 * r9);\n            d6 += h8 * (5 * r8);\n            d6 += h9 * (5 * r7);\n            c += (d6 >>> 13);\n            d6 &= 0x1fff;\n            var d7 = c;\n            d7 += h0 * r7;\n            d7 += h1 * r6;\n            d7 += h2 * r5;\n            d7 += h3 * r4;\n            d7 += h4 * r3;\n            c = (d7 >>> 13);\n            d7 &= 0x1fff;\n            d7 += h5 * r2;\n            d7 += h6 * r1;\n            d7 += h7 * r0;\n            d7 += h8 * (5 * r9);\n            d7 += h9 * (5 * r8);\n            c += (d7 >>> 13);\n            d7 &= 0x1fff;\n            var d8 = c;\n            d8 += h0 * r8;\n            d8 += h1 * r7;\n            d8 += h2 * r6;\n            d8 += h3 * r5;\n            d8 += h4 * r4;\n            c = (d8 >>> 13);\n            d8 &= 0x1fff;\n            d8 += h5 * r3;\n            d8 += h6 * r2;\n            d8 += h7 * r1;\n            d8 += h8 * r0;\n            d8 += h9 * (5 * r9);\n            c += (d8 >>> 13);\n            d8 &= 0x1fff;\n            var d9 = c;\n            d9 += h0 * r9;\n            d9 += h1 * r8;\n            d9 += h2 * r7;\n            d9 += h3 * r6;\n            d9 += h4 * r5;\n            c = (d9 >>> 13);\n            d9 &= 0x1fff;\n            d9 += h5 * r4;\n            d9 += h6 * r3;\n            d9 += h7 * r2;\n            d9 += h8 * r1;\n            d9 += h9 * r0;\n            c += (d9 >>> 13);\n            d9 &= 0x1fff;\n            c = (((c << 2) + c)) | 0;\n            c = (c + d0) | 0;\n            d0 = c & 0x1fff;\n            c = (c >>> 13);\n            d1 += c;\n            h0 = d0;\n            h1 = d1;\n            h2 = d2;\n            h3 = d3;\n            h4 = d4;\n            h5 = d5;\n            h6 = d6;\n            h7 = d7;\n            h8 = d8;\n            h9 = d9;\n            mpos += 16;\n            bytes -= 16;\n        }\n        this._h[0] = h0;\n        this._h[1] = h1;\n        this._h[2] = h2;\n        this._h[3] = h3;\n        this._h[4] = h4;\n        this._h[5] = h5;\n        this._h[6] = h6;\n        this._h[7] = h7;\n        this._h[8] = h8;\n        this._h[9] = h9;\n    };\n    Poly1305.prototype.finish = function (mac, macpos) {\n        if (macpos === void 0) { macpos = 0; }\n        var g = new Uint16Array(10);\n        var c;\n        var mask;\n        var f;\n        var i;\n        if (this._leftover) {\n            i = this._leftover;\n            this._buffer[i++] = 1;\n            for (; i < 16; i++) {\n                this._buffer[i] = 0;\n            }\n            this._fin = 1;\n            this._blocks(this._buffer, 0, 16);\n        }\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        for (i = 2; i < 10; i++) {\n            this._h[i] += c;\n            c = this._h[i] >>> 13;\n            this._h[i] &= 0x1fff;\n        }\n        this._h[0] += (c * 5);\n        c = this._h[0] >>> 13;\n        this._h[0] &= 0x1fff;\n        this._h[1] += c;\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        this._h[2] += c;\n        g[0] = this._h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (i = 1; i < 10; i++) {\n            g[i] = this._h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= (1 << 13);\n        mask = (c ^ 1) - 1;\n        for (i = 0; i < 10; i++) {\n            g[i] &= mask;\n        }\n        mask = ~mask;\n        for (i = 0; i < 10; i++) {\n            this._h[i] = (this._h[i] & mask) | g[i];\n        }\n        this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;\n        this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;\n        this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;\n        this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;\n        this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;\n        this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;\n        this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;\n        this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;\n        f = this._h[0] + this._pad[0];\n        this._h[0] = f & 0xffff;\n        for (i = 1; i < 8; i++) {\n            f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;\n            this._h[i] = f & 0xffff;\n        }\n        mac[macpos + 0] = this._h[0] >>> 0;\n        mac[macpos + 1] = this._h[0] >>> 8;\n        mac[macpos + 2] = this._h[1] >>> 0;\n        mac[macpos + 3] = this._h[1] >>> 8;\n        mac[macpos + 4] = this._h[2] >>> 0;\n        mac[macpos + 5] = this._h[2] >>> 8;\n        mac[macpos + 6] = this._h[3] >>> 0;\n        mac[macpos + 7] = this._h[3] >>> 8;\n        mac[macpos + 8] = this._h[4] >>> 0;\n        mac[macpos + 9] = this._h[4] >>> 8;\n        mac[macpos + 10] = this._h[5] >>> 0;\n        mac[macpos + 11] = this._h[5] >>> 8;\n        mac[macpos + 12] = this._h[6] >>> 0;\n        mac[macpos + 13] = this._h[6] >>> 8;\n        mac[macpos + 14] = this._h[7] >>> 0;\n        mac[macpos + 15] = this._h[7] >>> 8;\n        this._finished = true;\n        return this;\n    };\n    Poly1305.prototype.update = function (m) {\n        var mpos = 0;\n        var bytes = m.length;\n        var want;\n        if (this._leftover) {\n            want = (16 - this._leftover);\n            if (want > bytes) {\n                want = bytes;\n            }\n            for (var i = 0; i < want; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            bytes -= want;\n            mpos += want;\n            this._leftover += want;\n            if (this._leftover < 16) {\n                return this;\n            }\n            this._blocks(this._buffer, 0, 16);\n            this._leftover = 0;\n        }\n        if (bytes >= 16) {\n            want = bytes - (bytes % 16);\n            this._blocks(m, mpos, want);\n            mpos += want;\n            bytes -= want;\n        }\n        if (bytes) {\n            for (var i = 0; i < bytes; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            this._leftover += bytes;\n        }\n        return this;\n    };\n    Poly1305.prototype.digest = function () {\n        // TODO(dchest): it behaves differently than other hashes/HMAC,\n        // because it throws when finished — others just return saved result.\n        if (this._finished) {\n            throw new Error(\"Poly1305 was finished\");\n        }\n        var mac = new Uint8Array(16);\n        this.finish(mac);\n        return mac;\n    };\n    Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._r);\n        wipe_1.wipe(this._h);\n        wipe_1.wipe(this._pad);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = true; // mark as finished even if not\n        return this;\n    };\n    return Poly1305;\n}());\nexports.Poly1305 = Poly1305;\n/**\n * Returns 16-byte authenticator of data using a one-time 32-byte key.\n *\n * Important: key should be used for only one message, it should never repeat.\n */\nfunction oneTimeAuth(key, data) {\n    var h = new Poly1305(key);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.oneTimeAuth = oneTimeAuth;\n/**\n * Returns true if two authenticators are 16-byte long and equal.\n * Uses contant-time comparison to avoid leaking timing information.\n */\nfunction equal(a, b) {\n    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {\n        return false;\n    }\n    return constant_time_1.equal(a, b);\n}\nexports.equal = equal;\n//# sourceMappingURL=poly1305.js.map","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chacha_1 = require(\"@stablelib/chacha\");\nvar poly1305_1 = require(\"@stablelib/poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */ (function () {\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    function ChaCha20Poly1305(key) {\n        this.nonceLength = exports.NONCE_LENGTH;\n        this.tagLength = exports.TAG_LENGTH;\n        if (key.length !== exports.KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Allocate space for sealed ciphertext.\n        var resultLength = plaintext.length + this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Encrypt plaintext.\n        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        var calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n        // Constant-time compare tags and return null if they differ.\n        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n        // Allocate space for decrypted plaintext.\n        var resultLength = sealed.length - this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Decrypt.\n        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    ChaCha20Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._key);\n        return this;\n    };\n    ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n        // Initialize Poly1305 with authKey.\n        var h = new poly1305_1.Poly1305(authKey);\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        var length = new Uint8Array(8);\n        if (associatedData) {\n            binary_1.writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n        // Authenticate length of ciphertext.\n        binary_1.writeUint64LE(ciphertext.length, length);\n        h.update(length);\n        // Get tag and copy it into tagOut.\n        var tag = h.digest();\n        for (var i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n        // Cleanup.\n        h.clean();\n        wipe_1.wipe(tag);\n        wipe_1.wipe(length);\n    };\n    return ChaCha20Poly1305;\n}());\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;\n//# sourceMappingURL=chacha20poly1305.js.map","\"use strict\";\n// Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xchacha20_1 = require(\"@stablelib/xchacha20\");\nvar chacha20poly1305_1 = require(\"@stablelib/chacha20poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 24;\nexports.TAG_LENGTH = 16;\n/**\n * XChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in draft-irtf-cfrg-xchacha-01.\n * See https://tools.ietf.org/html/draft-irtf-cfrg-xchacha-01\n */\nvar XChaCha20Poly1305 = /** @class */ (function () {\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    function XChaCha20Poly1305(key) {\n        this.nonceLength = exports.NONCE_LENGTH;\n        this.tagLength = exports.TAG_LENGTH;\n        if (key.length !== exports.KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which\n     * uses the first 16 bytes of the nonce and the secret key with\n     * HChaCha to generate an initial subkey. The last 8 bytes of the nonce\n     * are then prefixed with 4 zero bytes and then provided with the subkey\n     * to the ChaCha20Poly1305 implementation.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    XChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n        if (nonce.length !== 24) {\n            throw new Error(\"XChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Use HSalsa one-way function to transform first 16 bytes of\n        // 24-byte extended nonce and key into a new key for Salsa\n        // stream -- \"subkey\".\n        var subKey = xchacha20_1.hchacha(this._key, nonce.subarray(0, 16), new Uint8Array(32));\n        // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n        // and a subkey derived in the previous step as key to encrypt.\n        var modifiedNonce = new Uint8Array(12);\n        modifiedNonce.set(nonce.subarray(16), 4);\n        var chaChaPoly = new chacha20poly1305_1.ChaCha20Poly1305(subKey);\n        var result = chaChaPoly.seal(modifiedNonce, plaintext, associatedData, dst);\n        wipe_1.wipe(subKey);\n        wipe_1.wipe(modifiedNonce);\n        chaChaPoly.clean();\n        return result;\n    };\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which\n     * then uses the first 16 bytes of the nonce and the secret key with\n     * Hchacha to generate an initial subkey. The last 8 bytes of the nonce\n     * are then prefixed with 4 zero bytes and then provided with the subkey\n     * to the chacha20poly1305 implementation.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    XChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n        if (nonce.length !== 24) {\n            throw new Error(\"XChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n        /**\n        * Generate subKey by using HChaCha20 function as defined\n        * in section 2 step 1 of draft-irtf-cfrg-xchacha-01\n        */\n        var subKey = xchacha20_1.hchacha(this._key, nonce.subarray(0, 16), new Uint8Array(32));\n        /**\n        * Generate Nonce as defined - remaining 8 bytes of the nonce prefixed with\n        * 4 zero bytes\n        */\n        var modifiedNonce = new Uint8Array(12);\n        modifiedNonce.set(nonce.subarray(16), 4);\n        /**\n         * Authenticate and decrypt by calling into chacha20poly1305.\n         */\n        var chaChaPoly = new chacha20poly1305_1.ChaCha20Poly1305(subKey);\n        var result = chaChaPoly.open(modifiedNonce, sealed, associatedData, dst);\n        wipe_1.wipe(subKey);\n        wipe_1.wipe(modifiedNonce);\n        chaChaPoly.clean();\n        return result;\n    };\n    XChaCha20Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._key);\n        return this;\n    };\n    return XChaCha20Poly1305;\n}());\nexports.XChaCha20Poly1305 = XChaCha20Poly1305;\n//# sourceMappingURL=xchacha20poly1305.js.map","import * as u8a from 'uint8arrays';\nimport { fromString } from 'uint8arrays';\nimport { bases } from 'multiformats/basics';\nimport { hash } from '@stablelib/sha256';\nimport sha3 from 'js-sha3';\nimport elliptic from 'elliptic';\nimport { sign, verify } from '@stablelib/ed25519';\nimport canonicalizeData from 'canonicalize';\nimport { bech32 } from 'bech32';\nimport { sharedKey, generateKeyPair } from '@stablelib/x25519';\nimport { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305';\nimport { randomBytes } from '@stablelib/random';\nimport { fromString as fromString$1 } from 'uint8arrays/from-string';\n\nfunction bytesToBase64url(b) {\n  return u8a.toString(b, 'base64url');\n}\nfunction base64ToBytes(s) {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  return u8a.fromString(inputBase64Url, 'base64url');\n}\nfunction base58ToBytes(s) {\n  return u8a.fromString(s, 'base58btc');\n}\nfunction bytesToBase58(b) {\n  return u8a.toString(b, 'base58btc');\n}\nfunction hexToBytes(s) {\n  const input = s.startsWith('0x') ? s.substring(2) : s;\n  return u8a.fromString(input.toLowerCase(), 'base16');\n}\nfunction encodeBase64url(s) {\n  return bytesToBase64url(u8a.fromString(s));\n}\nfunction decodeBase64url(s) {\n  return u8a.toString(base64ToBytes(s));\n}\nfunction bytesToHex(b) {\n  return u8a.toString(b, 'base16');\n}\nfunction stringToBytes(s) {\n  return u8a.fromString(s);\n}\nfunction toJose({\n  r,\n  s,\n  recoveryParam\n}, recoverable) {\n  const jose = new Uint8Array(recoverable ? 65 : 64);\n  jose.set(u8a.fromString(r, 'base16'), 0);\n  jose.set(u8a.fromString(s, 'base16'), 32);\n\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam');\n    }\n\n    jose[64] = recoveryParam;\n  }\n\n  return bytesToBase64url(jose);\n}\nfunction fromJose(signature) {\n  const signatureBytes = base64ToBytes(signature);\n\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`);\n  }\n\n  const r = bytesToHex(signatureBytes.slice(0, 32));\n  const s = bytesToHex(signatureBytes.slice(32, 64));\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined;\n  return {\n    r,\n    s,\n    recoveryParam\n  };\n}\nfunction toSealed(ciphertext, tag) {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)]);\n}\nfunction leftpad(data, size = 64) {\n  if (data.length === size) return data;\n  return '0'.repeat(size - data.length) + data;\n}\n\nfunction sha256(payload) {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload;\n  return hash(data);\n}\nfunction keccak(data) {\n  return new Uint8Array(sha3.keccak_256.arrayBuffer(data));\n}\nfunction toEthereumAddress(hexPublicKey) {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16');\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`;\n}\n\nfunction writeUint32BE(value, array = new Uint8Array(4)) {\n  const encoded = u8a.fromString(value.toString(), 'base10');\n  array.set(encoded, 4 - encoded.length);\n  return array;\n}\n\nconst lengthAndInput = input => u8a.concat([writeUint32BE(input.length), input]); // This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\n\n\nfunction concatKDF(secret, keyLen, alg, producerInfo, consumerInfo) {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`);\n  const value = u8a.concat([lengthAndInput(u8a.fromString(alg)), lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), writeUint32BE(keyLen)]); // since our key lenght is 256 we only have to do one round\n\n  const roundNumber = 1;\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]));\n}\n\nconst secp256k1$1 = new elliptic.ec('secp256k1');\n/**\r\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\r\n *\r\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\r\n *\r\n *  @example\r\n *  ```typescript\r\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\r\n *  const signature: string = await sign(data)\r\n *  ```\r\n *\r\n *  @param    {String}    privateKey   a private key as `Uint8Array`\r\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\r\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\r\n */\n\nfunction ES256KSigner(privateKey, recoverable = false) {\n  const privateKeyBytes = privateKey;\n\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`);\n  }\n\n  const keyPair = secp256k1$1.keyFromPrivate(privateKeyBytes);\n  return function (data) {\n    try {\n      const {\n        r,\n        s,\n        recoveryParam\n      } = keyPair.sign(sha256(data));\n      return Promise.resolve(toJose({\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam\n      }, recoverable));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\n/**\r\n * @deprecated Please use ES256KSigner\r\n *  The SimpleSigner returns a configured function for signing data.\r\n *\r\n *  @example\r\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\r\n *  signer(data, (err, signature) => {\r\n *    ...\r\n *  })\r\n *\r\n *  @param    {String}         hexPrivateKey    a hex encoded private key\r\n *  @return   {Function}                     a configured signer function\r\n */\n\nfunction SimpleSigner(hexPrivateKey) {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true);\n  return function (data) {\n    try {\n      return Promise.resolve(signer(data)).then(fromJose);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\n/**\r\n * @deprecated Please use ES256KSigner\r\n *  The EllipticSigner returns a configured function for signing data.\r\n *\r\n *  @example\r\n *  ```typescript\r\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\r\n *  signer(data).then( (signature: string) => {\r\n *    ...\r\n *  })\r\n *  ```\r\n *\r\n *  @param    {String}         hexPrivateKey    a hex encoded private key\r\n *  @return   {Function}                        a configured signer function\r\n */\n\nfunction EllipticSigner(hexPrivateKey) {\n  return ES256KSigner(hexToBytes(hexPrivateKey));\n}\n\n/**\r\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\r\n *\r\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\r\n *\r\n *  @example\r\n *  ```typescript\r\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\r\n *  const signature: string = await sign(data)\r\n *  ```\r\n *\r\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array`\r\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\r\n */\n\nfunction EdDSASigner(secretKey) {\n  const privateKeyBytes = secretKey;\n\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`);\n  }\n\n  return function (data) {\n    try {\n      const dataBytes = typeof data === 'string' ? stringToBytes(data) : data;\n      const sig = sign(privateKeyBytes, dataBytes);\n      return Promise.resolve(bytesToBase64url(sig));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\n/**\r\n * @deprecated Please use EdDSASigner\r\n *\r\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\r\n *\r\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\r\n *\r\n *  @example\r\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\r\n *  const data: string = '...'\r\n *  signer(data).then( (signature: string) => {\r\n *    ...\r\n *  })\r\n *\r\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\r\n *  @return   {Function}                     a configured signer function\r\n */\n\nfunction NaclSigner(base64PrivateKey) {\n  return EdDSASigner(base64ToBytes(base64PrivateKey));\n}\n\nfunction instanceOfEcdsaSignature(object) {\n  return typeof object === 'object' && 'r' in object && 's' in object;\n}\n\nfunction ES256KSignerAlg(recoverable) {\n  return function sign(payload, signer) {\n    try {\n      return Promise.resolve(signer(payload)).then(function (signature) {\n        if (instanceOfEcdsaSignature(signature)) {\n          return toJose(signature, recoverable);\n        } else {\n          if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n            throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`);\n          }\n\n          return signature;\n        }\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nfunction Ed25519SignerAlg() {\n  return function sign(payload, signer) {\n    try {\n      return Promise.resolve(signer(payload)).then(function (signature) {\n        if (!instanceOfEcdsaSignature(signature)) {\n          return signature;\n        } else {\n          throw new Error('invalid_config: expected a signer function that returns a string instead of signature object');\n        }\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nconst algorithms$1 = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg()\n};\n\nfunction SignerAlg(alg) {\n  const impl = algorithms$1[alg];\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`);\n  return impl;\n}\n\n// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\nconst zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nconst zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nconst sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nconst sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction fn1(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn2(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn3(a, b, c, d, e, m, k, s) {\n  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn4(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;\n}\n\nfunction fn5(a, b, c, d, e, m, k, s) {\n  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;\n}\n\nclass Ripemd160 {\n  // state\n  constructor(blockSize = 64) {\n    this._a = 0x67452301;\n    this._b = 0xefcdab89;\n    this._c = 0x98badcfe;\n    this._d = 0x10325476;\n    this._e = 0xc3d2e1f0;\n    this._blockOffset = 0;\n    this._block = void 0;\n    this._blockSize = void 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = void 0;\n\n    this.update = data => {\n      if (this._finalized) throw new Error('Digest already called'); // consume data\n\n      const block = this._block;\n      let offset = 0;\n\n      while (this._blockOffset + data.length - offset >= this._blockSize) {\n        for (let i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n\n        this._update();\n\n        this._blockOffset = 0;\n      }\n\n      while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length\n\n\n      for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n        this._length[j] += carry;\n        carry = this._length[j] / 0x0100000000 | 0;\n        if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n      }\n\n      return this;\n    };\n\n    this.digest = () => {\n      if (this._finalized) throw new Error('Digest already called');\n      this._finalized = true;\n\n      const digest = this._digest(); // reset state\n\n\n      this._block.fill(0);\n\n      this._blockOffset = 0;\n\n      for (let i = 0; i < 4; ++i) this._length[i] = 0;\n\n      return digest;\n    };\n\n    this._update = () => {\n      const words = new Array(16);\n      const temp = new DataView(this._block.buffer);\n\n      for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true);\n\n      let al = this._a | 0;\n      let bl = this._b | 0;\n      let cl = this._c | 0;\n      let dl = this._d | 0;\n      let el = this._e | 0;\n      let ar = this._a | 0;\n      let br = this._b | 0;\n      let cr = this._c | 0;\n      let dr = this._d | 0;\n      let er = this._e | 0; // computation\n\n      for (let i = 0; i < 80; i += 1) {\n        let tl;\n        let tr;\n\n        if (i < 16) {\n          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);\n          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);\n        } else if (i < 32) {\n          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);\n          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);\n        } else if (i < 48) {\n          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);\n          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);\n        } else if (i < 64) {\n          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);\n          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);\n        } else {\n          // if (i<80) {\n          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);\n          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);\n        }\n\n        al = el;\n        el = dl;\n        dl = rotl(cl, 10);\n        cl = bl;\n        bl = tl;\n        ar = er;\n        er = dr;\n        dr = rotl(cr, 10);\n        cr = br;\n        br = tr;\n      } // update state\n\n\n      const t = this._b + cl + dr | 0;\n      this._b = this._c + dl + er | 0;\n      this._c = this._d + el + ar | 0;\n      this._d = this._e + al + br | 0;\n      this._e = this._a + bl + cr | 0;\n      this._a = t;\n    };\n\n    this._digest = () => {\n      // create padding and handle blocks\n      this._block[this._blockOffset++] = 0x80;\n\n      if (this._blockOffset > 56) {\n        this._block.fill(0, this._blockOffset, 64);\n\n        this._update();\n\n        this._blockOffset = 0;\n      }\n\n      this._block.fill(0, this._blockOffset, 56);\n\n      const temp = new DataView(this._block.buffer);\n      temp.setUint32(56, this._length[0], true);\n      temp.setUint32(60, this._length[1], true);\n      this._block = new Uint8Array(temp.buffer);\n\n      this._update(); // produce result\n\n\n      const buffer = new DataView(new Uint8Array(20).buffer);\n      buffer.setInt32(0, this._a, true);\n      buffer.setInt32(4, this._b, true);\n      buffer.setInt32(8, this._c, true);\n      buffer.setInt32(12, this._d, true);\n      buffer.setInt32(16, this._e, true);\n      return new Uint8Array(buffer.buffer);\n    };\n\n    this._block = new Uint8Array(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n\n}\n\nconst publicKeyToAddress$1 = (publicKey, otherAddress) => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex');\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex');\n  const publicKeyHash = new Ripemd160().update(sha256(publicKeyBuffer)).digest();\n  const step1 = version + u8a.toString(publicKeyHash, 'hex');\n  const step2 = sha256(u8a.fromString(step1, 'hex'));\n  const step3 = sha256(step2);\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8);\n  const step4 = step1 + checksum;\n  return bytesToBase58(u8a.fromString(step4, 'hex'));\n};\n\nconst EC = elliptic.ec;\nconst publicKeyToAddress = (publicKey, prefix) => {\n  const ec = new EC('secp256k1');\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true);\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex');\n  const hash = new Ripemd160().update(sha256(publicKeyBuffer)).digest();\n  const words = bech32.toWords(hash);\n  return bech32.encode(prefix, words).replace(prefix, '');\n};\n\nconst verifyBlockchainAccountId = (publicKey, blockchainAccountId) => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':');\n\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = publicKeyToAddress$1(publicKey, chain[chain.length - 1]);\n        break;\n\n      case 'cosmos':\n        chain[chain.length - 1] = publicKeyToAddress(publicKey, chain[1]);\n        break;\n\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey);\n        break;\n\n      default:\n        return false;\n    }\n\n    return chain.join(':').toLowerCase() === blockchainAccountId.toLowerCase();\n  }\n\n  return false;\n};\n\nconst secp256k1 = new elliptic.ec('secp256k1'); // converts a JOSE signature to it's components\n\nfunction toSignatureObject(signature, recoverable = false) {\n  const rawSig = base64ToBytes(signature);\n\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length');\n  }\n\n  const r = bytesToHex(rawSig.slice(0, 32));\n  const s = bytesToHex(rawSig.slice(32, 64));\n  const sigObj = {\n    r,\n    s\n  };\n\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64];\n  }\n\n  return sigObj;\n}\n\nfunction extractPublicKeyBytes(pk) {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58);\n  } else if (pk.publicKeyBase64) {\n    return base64ToBytes(pk.publicKeyBase64);\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex);\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(secp256k1.keyFromPublic({\n      x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n      y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y))\n    }).getPublic('hex'));\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.kty === 'OKP' && pk.publicKeyJwk.crv === 'Ed25519' && pk.publicKeyJwk.x) {\n    return base64ToBytes(pk.publicKeyJwk.x);\n  } else if (pk.publicKeyMultibase) {\n    const {\n      base16,\n      base58btc,\n      base64,\n      base64url\n    } = bases;\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)));\n    return baseDecoder.decode(pk.publicKeyMultibase);\n  }\n\n  return new Uint8Array();\n}\n\nfunction verifyES256K(data, signature, authenticators) {\n  const hash = sha256(data);\n  const sigObj = toSignatureObject(signature);\n  const fullPublicKeys = authenticators.filter(({\n    ethereumAddress,\n    blockchainAccountId\n  }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined';\n  });\n  const blockchainAddressKeys = authenticators.filter(({\n    ethereumAddress,\n    blockchainAccountId\n  }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== 'undefined';\n  });\n  let signer = fullPublicKeys.find(pk => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk);\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj);\n    } catch (err) {\n      return false;\n    }\n  });\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys);\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT');\n  return signer;\n}\nfunction verifyRecoverableES256K(data, signature, authenticators) {\n  let signatures;\n\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)];\n  } else {\n    const so = toSignatureObject(signature, false);\n    signatures = [{ ...so,\n      recoveryParam: 0\n    }, { ...so,\n      recoveryParam: 1\n    }];\n  }\n\n  const checkSignatureAgainstSigner = sigObj => {\n    const hash = sha256(data); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    const recoveredKey = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam);\n    const recoveredPublicKeyHex = recoveredKey.encode('hex');\n    const recoveredCompressedPublicKeyHex = recoveredKey.encode('hex', true);\n    const recoveredAddress = toEthereumAddress(recoveredPublicKeyHex).toLowerCase();\n    const signer = authenticators.find(pk => {\n      var _pk$ethereumAddress, _pk$blockchainAccount, _pk$blockchainAccount2;\n\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk));\n      return keyHex === recoveredPublicKeyHex || keyHex === recoveredCompressedPublicKeyHex || ((_pk$ethereumAddress = pk.ethereumAddress) == null ? void 0 : _pk$ethereumAddress.toLowerCase()) === recoveredAddress || ((_pk$blockchainAccount = pk.blockchainAccountId) == null ? void 0 : (_pk$blockchainAccount2 = _pk$blockchainAccount.split('@eip155')) == null ? void 0 : _pk$blockchainAccount2[0].toLowerCase()) === recoveredAddress || // CAIP-2\n      verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      ;\n    });\n    return signer;\n  };\n\n  const signer = signatures.map(checkSignatureAgainstSigner).filter(key => typeof key !== 'undefined');\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT');\n  return signer[0];\n}\nfunction verifyEd25519(data, signature, authenticators) {\n  const clear = stringToBytes(data);\n  const sig = base64ToBytes(signature);\n  const signer = authenticators.find(pk => {\n    return verify(extractPublicKeyBytes(pk), clear, sig);\n  });\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT');\n  return signer;\n}\nconst algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519\n};\n\nfunction VerifierAlgorithm(alg) {\n  const impl = algorithms[alg];\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`);\n  return impl;\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject;\n\n/**\r\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\r\n *\r\n *  @example\r\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\r\n *      const payload = obj.payload\r\n *      const profile = obj.profile\r\n *      const jwt = obj.jwt\r\n *      ...\r\n *  })\r\n *\r\n *  @param    {String}            alg                a JWT algorithm\r\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\r\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\r\n *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\r\n */\nconst resolveAuthenticator = function (resolver, alg, issuer, proofPurpose) {\n  try {\n    const types = SUPPORTED_PUBLIC_KEY_TYPES[alg];\n\n    if (!types || types.length === 0) {\n      throw new Error(`not_supported: No supported signature types for algorithm ${alg}`);\n    }\n\n    let didResult;\n    return Promise.resolve(resolver.resolve(issuer, {\n      accept: DID_JSON\n    })).then(function (result) {\n      var _didResult$didResolut, _didResult, _didResult$didDocumen, _didResult2, _didResult2$didDocume;\n\n      // support legacy resolvers that do not produce DIDResolutionResult\n      if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n        didResult = {\n          didDocument: result,\n          didDocumentMetadata: {},\n          didResolutionMetadata: {\n            contentType: DID_JSON\n          }\n        };\n      } else {\n        didResult = result;\n      }\n\n      if ((_didResult$didResolut = didResult.didResolutionMetadata) != null && _didResult$didResolut.error || didResult.didDocument == null) {\n        const {\n          error,\n          message\n        } = didResult.didResolutionMetadata;\n        throw new Error(`resolver_error: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`);\n      }\n\n      const getPublicKeyById = (verificationMethods, pubid) => {\n        const filtered = verificationMethods.filter(({\n          id\n        }) => pubid === id);\n        return filtered.length > 0 ? filtered[0] : null;\n      };\n\n      let publicKeysToCheck = [...(((_didResult = didResult) == null ? void 0 : (_didResult$didDocumen = _didResult.didDocument) == null ? void 0 : _didResult$didDocumen.verificationMethod) || []), ...(((_didResult2 = didResult) == null ? void 0 : (_didResult2$didDocume = _didResult2.didDocument) == null ? void 0 : _didResult2$didDocume.publicKey) || [])];\n\n      if (typeof proofPurpose === 'string') {\n        var _didResult3;\n\n        // support legacy DID Documents that do not list assertionMethod\n        if (proofPurpose.startsWith('assertion') && !Object.getOwnPropertyNames((_didResult3 = didResult) == null ? void 0 : _didResult3.didDocument).includes('assertionMethod')) {\n          didResult.didDocument = { ...didResult.didDocument\n          };\n          didResult.didDocument.assertionMethod = [...publicKeysToCheck.map(pk => pk.id)];\n        }\n\n        publicKeysToCheck = (didResult.didDocument[proofPurpose] || []).map(verificationMethod => {\n          if (typeof verificationMethod === 'string') {\n            return getPublicKeyById(publicKeysToCheck, verificationMethod);\n          } else if (typeof verificationMethod.publicKey === 'string') {\n            // this is a legacy format\n            return getPublicKeyById(publicKeysToCheck, verificationMethod.publicKey);\n          } else {\n            return verificationMethod;\n          }\n        }).filter(key => key != null);\n      }\n\n      const authenticators = publicKeysToCheck.filter(({\n        type\n      }) => types.find(supported => supported === type));\n\n      if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n        throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`);\n      }\n\n      if (!authenticators || authenticators.length === 0) {\n        throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys for ${alg}`);\n      }\n\n      return {\n        authenticators,\n        issuer,\n        didResolutionResult: didResult\n      };\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/**\r\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\r\n *  and the did doc of the issuer of the JWT.\r\n *\r\n *  @example\r\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\r\n *      const did = obj.did // DID of signer\r\n *      const payload = obj.payload\r\n *      const doc = obj.doc // DID Document of signer\r\n *      const jwt = obj.jwt\r\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\r\n *      ...\r\n *  })\r\n *\r\n *  @param    {String}            jwt                a JSON Web Token to verify\r\n *  @param    {Object}            [options]           an unsigned credential object\r\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\r\n *  @param    {String}            options.audience    DID of the recipient of the JWT\r\n *  @param    {String}            options.callbackUrl callback url in JWT\r\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\r\n */\nconst verifyJWT = function (jwt, options = {\n  resolver: undefined,\n  auth: undefined,\n  audience: undefined,\n  callbackUrl: undefined,\n  skewTime: undefined,\n  proofPurpose: undefined\n}) {\n  try {\n    if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured');\n    const {\n      payload,\n      header,\n      signature,\n      data\n    } = decodeJWT(jwt);\n    const proofPurpose = Object.prototype.hasOwnProperty.call(options, 'auth') ? options.auth ? 'authentication' : undefined : options.proofPurpose;\n\n    if (!payload.iss) {\n      throw new Error('invalid_jwt: JWT iss is required');\n    }\n\n    let did = '';\n\n    if (payload.iss === SELF_ISSUED_V2) {\n      if (!payload.sub) {\n        throw new Error('invalid_jwt: JWT sub is required');\n      }\n\n      if (typeof payload.sub_jwk === 'undefined') {\n        did = payload.sub;\n      } else {\n        did = (header.kid || '').split('#')[0];\n      }\n    } else if (payload.iss === SELF_ISSUED_V0_1) {\n      if (!payload.did) {\n        throw new Error('invalid_jwt: JWT did is required');\n      }\n\n      did = payload.did;\n    } else {\n      did = payload.iss;\n    }\n\n    if (!did) {\n      throw new Error(`invalid_jwt: No DID has been found in the JWT`);\n    }\n\n    return Promise.resolve(resolveAuthenticator(options.resolver, header.alg, did, proofPurpose)).then(function ({\n      didResolutionResult,\n      authenticators,\n      issuer\n    }) {\n      return Promise.resolve(verifyJWSDecoded({\n        header,\n        data,\n        signature\n      }, authenticators)).then(function (signer) {\n        const now = Math.floor(Date.now() / 1000);\n        const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW;\n\n        if (signer) {\n          const nowSkewed = now + skewTime;\n\n          if (payload.nbf) {\n            if (payload.nbf > nowSkewed) {\n              throw new Error(`invalid_jwt: JWT not valid before nbf: ${payload.nbf}`);\n            }\n          } else if (payload.iat && payload.iat > nowSkewed) {\n            throw new Error(`invalid_jwt: JWT not valid yet (issued in the future) iat: ${payload.iat}`);\n          }\n\n          if (payload.exp && payload.exp <= now - skewTime) {\n            throw new Error(`invalid_jwt: JWT has expired: exp: ${payload.exp} < now: ${now}`);\n          }\n\n          if (payload.aud) {\n            if (!options.audience && !options.callbackUrl) {\n              throw new Error('invalid_config: JWT audience is required but your app address has not been configured');\n            }\n\n            const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud];\n            const matchedAudience = audArray.find(item => options.audience === item || options.callbackUrl === item);\n\n            if (typeof matchedAudience === 'undefined') {\n              throw new Error(`invalid_config: JWT audience does not match your DID or callback url`);\n            }\n          }\n\n          return {\n            payload,\n            didResolutionResult,\n            issuer,\n            signer,\n            jwt\n          };\n        }\n\n        throw new Error(`invalid_signature: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`);\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/**\r\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\r\n *\r\n *  @example\r\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\r\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\r\n *      ...\r\n *  })\r\n *\r\n *  @param    {Object}            payload               payload object\r\n *  @param    {Object}            [options]             an unsigned credential object\r\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\r\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\r\n *                                                      Please use `header.alg` to specify the algorithm\r\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\r\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\r\n *  @param    {Object}            header                optional object to specify or customize the JWT header\r\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error\r\n */\nconst createJWT = function (payload, {\n  issuer,\n  signer,\n  alg,\n  expiresIn,\n  canonicalize\n}, header = {}) {\n  try {\n    if (!signer) throw new Error('missing_signer: No Signer functionality has been configured');\n    if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured');\n    if (!header.typ) header.typ = 'JWT';\n    if (!header.alg) header.alg = alg;\n    const timestamps = {\n      iat: Math.floor(Date.now() / 1000),\n      exp: undefined\n    };\n\n    if (expiresIn) {\n      if (typeof expiresIn === 'number') {\n        timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn);\n      } else {\n        throw new Error('invalid_argument: JWT expiresIn is not a number');\n      }\n    }\n\n    const fullPayload = { ...timestamps,\n      ...payload,\n      iss: issuer\n    };\n    return createJWS(fullPayload, signer, header, {\n      canonicalize\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/**\r\n *  Creates a signed JWS given a payload, a signer, and an optional header.\r\n *\r\n *  @example\r\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\r\n *  const jws = await createJWS({ my: 'payload' }, signer)\r\n *\r\n *  @param    {Object}            payload           payload object\r\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\r\n *  @param    {Object}            header            optional object to specify or customize the JWS header\r\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\r\n *                                                    payload properties\r\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\r\n */\nconst createJWS = function (payload, signer, header = {}, options = {}) {\n  try {\n    if (!header.alg) header.alg = defaultAlg;\n    const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize);\n    const signingInput = [encodeSection(header, options.canonicalize), encodedPayload].join('.');\n    const jwtSigner = SignerAlg(header.alg);\n    return Promise.resolve(jwtSigner(signingInput, signer)).then(function (signature) {\n      return [signingInput, signature].join('.');\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nconst SUPPORTED_PUBLIC_KEY_TYPES = {\n  ES256K: ['EcdsaSecp256k1VerificationKey2019',\n  /**\r\n   * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\r\n   */\n  'EcdsaSecp256k1RecoveryMethod2020',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'Secp256k1VerificationKey2018',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'Secp256k1SignatureVerificationKey2018',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'EcdsaPublicKeySecp256k1'],\n  'ES256K-R': ['EcdsaSecp256k1VerificationKey2019',\n  /**\r\n   * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\r\n   */\n  'EcdsaSecp256k1RecoveryMethod2020',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'Secp256k1VerificationKey2018',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'Secp256k1SignatureVerificationKey2018',\n  /**\r\n   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\r\n   */\n  'EcdsaPublicKeySecp256k1'],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020', 'JsonWebKey2020'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020', 'JsonWebKey2020']\n};\nconst SELF_ISSUED_V2 = 'https://self-issued.me/v2';\nconst SELF_ISSUED_V0_1 = 'https://self-issued.me';\nconst defaultAlg = 'ES256K';\nconst DID_JSON = 'application/did+json'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction encodeSection(data, shouldCanonicalize = false) {\n  if (shouldCanonicalize) {\n    return encodeBase64url(canonicalizeData(data));\n  } else {\n    return encodeBase64url(JSON.stringify(data));\n  }\n}\n\nconst NBF_SKEW = 300;\n\nfunction decodeJWS(jws) {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/);\n\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`\n    };\n  }\n\n  throw new Error('invalid_argument: Incorrect format JWS');\n}\n/**  @module did-jwt/JWT */\n\n/**\r\n *  Decodes a JWT and returns an object representing the payload\r\n *\r\n *  @example\r\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\r\n *\r\n *  @param    {String}            jwt                a JSON Web Token to verify\r\n *  @return   {Object}                               a JS object representing the decoded JWT\r\n */\n\n\nfunction decodeJWT(jwt) {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT');\n\n  try {\n    const jws = decodeJWS(jwt);\n    const decodedJwt = Object.assign(jws, {\n      payload: JSON.parse(decodeBase64url(jws.payload))\n    });\n    return decodedJwt;\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT');\n  }\n}\n\nfunction verifyJWSDecoded({\n  header,\n  data,\n  signature\n}, pubKeys) {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys];\n  const signer = VerifierAlgorithm(header.alg)(data, signature, pubKeys);\n  return signer;\n}\n/**\r\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\r\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\r\n *\r\n *  @example\r\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\r\n *\r\n *  @param    {String}                          jws         A JWS string to verify\r\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\r\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\r\n */\n\n\nfunction verifyJWS(jws, pubKeys) {\n  const jwsDecoded = decodeJWS(jws);\n  return verifyJWSDecoded(jwsDecoded, pubKeys);\n}\n\nconst _iteratorSymbol = typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    const observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nconst _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    const result = new _Pact();\n    const state = this.s;\n\n    if (state) {\n      const callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        const value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _forTo(array, body, check) {\n  var i = -1,\n      pact,\n      reject;\n\n  function _cycle(result) {\n    try {\n      while (++i < array.length && (!check || !check())) {\n        result = body(i);\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n            return;\n          }\n        }\n      }\n\n      if (pact) {\n        _settle(pact, 1, result);\n      } else {\n        pact = result;\n      }\n    } catch (e) {\n      _settle(pact || (pact = new _Pact()), 2, e);\n    }\n  }\n\n  _cycle();\n\n  return pact;\n}\n\nfunction _forOf(target, body, check) {\n  if (typeof target[_iteratorSymbol] === \"function\") {\n    var iterator = target[_iteratorSymbol](),\n        step,\n        pact,\n        reject;\n\n    function _cycle(result) {\n      try {\n        while (!(step = iterator.next()).done && (!check || !check())) {\n          result = body(step.value);\n\n          if (result && result.then) {\n            if (_isSettledPact(result)) {\n              result = result.v;\n            } else {\n              result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n              return;\n            }\n          }\n        }\n\n        if (pact) {\n          _settle(pact, 1, result);\n        } else {\n          pact = result;\n        }\n      } catch (e) {\n        _settle(pact || (pact = new _Pact()), 2, e);\n      }\n    }\n\n    _cycle();\n\n    if (iterator.return) {\n      var _fixup = function (value) {\n        try {\n          if (!step.done) {\n            iterator.return();\n          }\n        } catch (e) {}\n\n        return value;\n      };\n\n      if (pact && pact.then) {\n        return pact.then(_fixup, function (e) {\n          throw _fixup(e);\n        });\n      }\n\n      _fixup();\n    }\n\n    return pact;\n  } // No support for Symbol.iterator\n\n\n  if (!(\"length\" in target)) {\n    throw new TypeError(\"Object is not iterable\");\n  } // Handle live collections properly\n\n\n  var values = [];\n\n  for (var i = 0; i < target.length; i++) {\n    values.push(target[i]);\n  }\n\n  return _forTo(values, function (i) {\n    return body(values[i]);\n  }, check);\n}\n\nfunction _for(test, update, body) {\n  var stage;\n\n  for (;;) {\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n\n    if (shouldContinue.then) {\n      stage = 0;\n      break;\n    }\n\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.s;\n      } else {\n        stage = 1;\n        break;\n      }\n    }\n\n    if (update) {\n      var updateValue = update();\n\n      if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n        stage = 2;\n        break;\n      }\n    }\n  }\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    do {\n      if (update) {\n        updateValue = update();\n\n        if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n          updateValue.then(_resumeAfterUpdate).then(void 0, reject);\n          return;\n        }\n      }\n\n      shouldContinue = test();\n\n      if (!shouldContinue || _isSettledPact(shouldContinue) && !shouldContinue.v) {\n        _settle(pact, 1, result);\n\n        return;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (_isSettledPact(result)) {\n        result = result.v;\n      }\n    } while (!result || !result.then);\n\n    result.then(_resumeAfterBody).then(void 0, reject);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      result = body();\n\n      if (result && result.then) {\n        result.then(_resumeAfterBody).then(void 0, reject);\n      } else {\n        _resumeAfterBody(result);\n      }\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n\n  function _resumeAfterUpdate() {\n    if (shouldContinue = test()) {\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n      } else {\n        _resumeAfterTest(shouldContinue);\n      }\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nfunction validateJWE(jwe) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties');\n  }\n\n  if (jwe.recipients) {\n    jwe.recipients.map(rec => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients');\n      }\n    });\n  }\n}\n\nfunction encodeJWE({\n  ciphertext,\n  tag,\n  iv,\n  protectedHeader,\n  recipient\n}, aad) {\n  const jwe = {\n    protected: protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag)\n  };\n  if (aad) jwe.aad = bytesToBase64url(aad);\n  if (recipient) jwe.recipients = [recipient];\n  return jwe;\n}\n\nconst decryptJWE = function (jwe, decrypter) {\n  try {\n    let _exit;\n\n    function _temp5(_result) {\n      if (_exit) ;\n      if (cleartext === null) throw new Error('failure: Failed to decrypt');\n      return cleartext;\n    }\n\n    validateJWE(jwe);\n    const protHeader = JSON.parse(decodeBase64url(jwe.protected));\n    if (protHeader.enc !== decrypter.enc) throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`);\n    const sealed = toSealed(jwe.ciphertext, jwe.tag);\n    const aad = fromString(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected);\n    let cleartext = null;\n\n    const _temp4 = function () {\n      if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n        return Promise.resolve(decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)).then(function (_decrypter$decrypt) {\n          cleartext = _decrypter$decrypt;\n        });\n      } else return function () {\n        if (!jwe.recipients || jwe.recipients.length === 0) {\n          throw new Error('bad_jwe: missing recipients');\n        } else {\n          let i = 0;\n          return _for(function () {\n            return !cleartext && i < jwe.recipients.length;\n          }, function () {\n            return i++;\n          }, function () {\n            const recipient = jwe.recipients[i];\n            Object.assign(recipient.header, protHeader);\n\n            const _temp3 = function () {\n              if (recipient.header.alg === decrypter.alg) {\n                return Promise.resolve(decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)).then(function (_decrypter$decrypt2) {\n                  cleartext = _decrypter$decrypt2;\n                });\n              }\n            }();\n\n            if (_temp3 && _temp3.then) return _temp3.then(function () {});\n          });\n        }\n      }();\n    }();\n\n    return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp5) : _temp5(_temp4));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nconst createJWE = function (cleartext, encrypters, protectedHeader = {}, aad) {\n  try {\n    if (encrypters[0].alg === 'dir') {\n      if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.');\n      return Promise.resolve(encrypters[0].encrypt(cleartext, protectedHeader, aad)).then(function (encryptionResult) {\n        return encodeJWE(encryptionResult, aad);\n      });\n    } else {\n      const tmpEnc = encrypters[0].enc;\n\n      if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n        throw new Error('invalid_argument: Incompatible encrypters passed');\n      }\n\n      let cek;\n      let jwe;\n\n      const _temp2 = _forOf(encrypters, function (encrypter) {\n        const _temp = function () {\n          if (!cek) {\n            return Promise.resolve(encrypter.encrypt(cleartext, protectedHeader, aad)).then(function (encryptionResult) {\n              cek = encryptionResult.cek;\n              jwe = encodeJWE(encryptionResult, aad);\n            });\n          } else {\n            return Promise.resolve(encrypter.encryptCek == null ? void 0 : encrypter.encryptCek(cek)).then(function (recipient) {\n              if (recipient) {\n                var _jwe, _jwe$recipients;\n\n                (_jwe = jwe) == null ? void 0 : (_jwe$recipients = _jwe.recipients) == null ? void 0 : _jwe$recipients.push(recipient);\n              }\n            });\n          }\n        }();\n\n        if (_temp && _temp.then) return _temp.then(function () {});\n      });\n\n      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {\n        return jwe;\n      }) : jwe);\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\n/**\r\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\r\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\r\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\r\n *\r\n * @throws 'invalid_argument:...' if the secret key size is wrong\r\n */\n\nfunction createX25519ECDH(mySecretKey) {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519');\n  }\n\n  return function (theirPublicKey) {\n    try {\n      if (theirPublicKey.length !== 32) {\n        throw new Error('invalid_argument: incorrect publicKey key length for X25519');\n      }\n\n      return Promise.resolve(sharedKey(mySecretKey, theirPublicKey));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\n/**\r\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\r\n * sender private key to encrypt the data).\r\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\r\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\r\n *\r\n * @param recipientPublicKey the byte array representing the recipient public key\r\n * @param senderSecret either a Uint8Array representing the sender secret key or\r\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\r\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\r\n *\r\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\r\n *\r\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\r\n * are subject to change as new revisions or until the official CFRG specification are released.\r\n *\r\n * @beta\r\n */\n\nconst resolveX25519Encrypters = function (dids, resolver) {\n  try {\n    const encryptersForDID = function (did, resolved = []) {\n      try {\n        return Promise.resolve(resolver.resolve(did)).then(function ({\n          didResolutionMetadata,\n          didDocument\n        }) {\n          function _temp4() {\n            var _didDocument$keyAgree, _didDocument$keyAgree2;\n\n            const agreementKeys = (_didDocument$keyAgree = didDocument.keyAgreement) == null ? void 0 : (_didDocument$keyAgree2 = _didDocument$keyAgree.map(key => {\n              if (typeof key === 'string') {\n                return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(pk => pk.id === key);\n              }\n\n              return key;\n            })) == null ? void 0 : _didDocument$keyAgree2.filter(key => typeof key !== 'undefined');\n            const pks = (agreementKeys == null ? void 0 : agreementKeys.filter(key => {\n              // TODO: should be able to use non base58 keys too\n              return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58);\n            })) || [];\n            if (!pks.length && !controllerEncrypters.length) throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`);\n            return pks.map(pk => x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)).concat(...controllerEncrypters);\n          }\n\n          resolved.push(did);\n\n          if (didResolutionMetadata != null && didResolutionMetadata.error || didDocument == null) {\n            throw new Error(`resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`);\n          }\n\n          let controllerEncrypters = [];\n\n          if (!didDocument.controller && !didDocument.keyAgreement) {\n            throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`);\n          }\n\n          const _temp3 = function () {\n            if (didDocument.controller) {\n              let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller];\n              controllers = controllers.filter(c => !resolved.includes(c));\n              const encrypterPromises = controllers.map(did => encryptersForDID(did, resolved).catch(() => {\n                return [];\n              }));\n              return Promise.resolve(Promise.all(encrypterPromises)).then(function (encrypterArrays) {\n                controllerEncrypters = [].concat(...encrypterArrays);\n              });\n            }\n          }();\n\n          return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    const encrypterPromises = dids.map(did => encryptersForDID(did));\n    return Promise.resolve(Promise.all(encrypterPromises)).then(function (encrypterArrays) {\n      const flattenedArray = [].concat(...encrypterArrays);\n      return flattenedArray;\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction createAuthEncrypter(recipientPublicKey, senderSecret, options = {}) {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options);\n}\n/**\r\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\r\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\r\n *\r\n * @param publicKey the byte array representing the recipient public key\r\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\r\n *\r\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\r\n *\r\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\r\n * is subject to change as new revisions or until the official CFRG specification is released.\r\n *\r\n * @beta\r\n */\n\nfunction createAnonEncrypter(publicKey, options = {}) {\n  return x25519Encrypter(publicKey, options == null ? void 0 : options.kid);\n}\n/**\r\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\r\n * sender public key to decrypt the data).\r\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\r\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\r\n *\r\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\r\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\r\n * @param senderPublicKey the byte array representing the sender public key\r\n *\r\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\r\n *\r\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\r\n * are subject to change as new revisions or until the official CFRG specification are released.\r\n *\r\n * @beta\r\n */\n\nfunction createAuthDecrypter(recipientSecret, senderPublicKey) {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey);\n}\n/**\r\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\r\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\r\n *\r\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\r\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\r\n *\r\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\r\n *\r\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\r\n * is subject to change as new revisions or until the official CFRG specification is released.\r\n *\r\n * @beta\r\n */\n\nfunction createAnonDecrypter(recipientSecret) {\n  return x25519Decrypter(recipientSecret);\n}\n\nfunction xc20pEncrypter(key) {\n  const cipher = new XChaCha20Poly1305(key);\n  return (cleartext, aad) => {\n    const iv = randomBytes(cipher.nonceLength);\n    const sealed = cipher.seal(iv, cleartext, aad);\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv\n    };\n  };\n}\n\nfunction xc20pDirEncrypter(key) {\n  const encrypt = function (cleartext, protectedHeader = {}, aad) {\n    try {\n      const protHeader = encodeBase64url(JSON.stringify(Object.assign({\n        alg\n      }, protectedHeader, {\n        enc\n      })));\n      const encodedAad = fromString$1(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader);\n      return Promise.resolve({ ...xc20pEncrypt(cleartext, encodedAad),\n        protectedHeader: protHeader\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const xc20pEncrypt = xc20pEncrypter(key);\n  const enc = 'XC20P';\n  const alg = 'dir';\n  return {\n    alg,\n    enc,\n    encrypt\n  };\n}\nfunction xc20pDirDecrypter(key) {\n  const decrypt = function (sealed, iv, aad) {\n    try {\n      return Promise.resolve(cipher.open(iv, sealed, aad));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const cipher = new XChaCha20Poly1305(key);\n  return {\n    alg: 'dir',\n    enc: 'XC20P',\n    decrypt\n  };\n}\nfunction x25519Encrypter(publicKey, kid) {\n  const encrypt = function (cleartext, protectedHeader = {}, aad) {\n    try {\n      // we won't want alg to be set to dir from xc20pDirEncrypter\n      Object.assign(protectedHeader, {\n        alg: undefined\n      }); // Content Encryption Key\n\n      const cek = randomBytes(32);\n      return Promise.resolve(xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)).then(function (_xc20pDirEncrypter$en) {\n        return Promise.resolve(encryptCek(cek)).then(function (_encryptCek) {\n          return { ..._xc20pDirEncrypter$en,\n            recipient: _encryptCek,\n            cek\n          };\n        });\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const encryptCek = function (cek) {\n    try {\n      const epk = generateKeyPair();\n      const sharedSecret = sharedKey(epk.secretKey, publicKey); // Key Encryption Key\n\n      const kek = concatKDF(sharedSecret, keyLen, alg);\n      const res = xc20pEncrypter(kek)(cek);\n      const recipient = {\n        encrypted_key: bytesToBase64url(res.ciphertext),\n        header: {\n          alg,\n          iv: bytesToBase64url(res.iv),\n          tag: bytesToBase64url(res.tag),\n          epk: {\n            kty: 'OKP',\n            crv,\n            x: bytesToBase64url(epk.publicKey)\n          }\n        }\n      };\n      if (kid) recipient.header.kid = kid;\n      return Promise.resolve(recipient);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const alg = 'ECDH-ES+XC20PKW';\n  const keyLen = 256;\n  const crv = 'X25519';\n  return {\n    alg,\n    enc: 'XC20P',\n    encrypt,\n    encryptCek\n  };\n}\n/**\r\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\r\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\r\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\r\n */\n\nfunction xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options = {}) {\n  const encrypt = function (cleartext, protectedHeader = {}, aad) {\n    try {\n      // we won't want alg to be set to dir from xc20pDirEncrypter\n      Object.assign(protectedHeader, {\n        alg: undefined\n      }); // Content Encryption Key\n\n      const cek = randomBytes(32);\n      return Promise.resolve(xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)).then(function (_xc20pDirEncrypter$en2) {\n        return Promise.resolve(encryptCek(cek)).then(function (_encryptCek2) {\n          return { ..._xc20pDirEncrypter$en2,\n            recipient: _encryptCek2,\n            cek\n          };\n        });\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const encryptCek = function (cek) {\n    try {\n      function _temp2() {\n        const sharedSecret = new Uint8Array(zE.length + zS.length);\n        sharedSecret.set(zE);\n        sharedSecret.set(zS, zE.length); // Key Encryption Key\n\n        const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo);\n        const res = xc20pEncrypter(kek)(cek);\n        const recipient = {\n          encrypted_key: bytesToBase64url(res.ciphertext),\n          header: {\n            alg,\n            iv: bytesToBase64url(res.iv),\n            tag: bytesToBase64url(res.tag),\n            epk: {\n              kty: 'OKP',\n              crv,\n              x: bytesToBase64url(epk.publicKey)\n            }\n          }\n        };\n        if (options.kid) recipient.header.kid = options.kid;\n        if (options.apu) recipient.header.apu = options.apu;\n        if (options.apv) recipient.header.apv = options.apv;\n        return recipient;\n      }\n\n      const epk = generateKeyPair();\n      const zE = sharedKey(epk.secretKey, recipientPublicKey); // ECDH-1PU requires additional shared secret between\n      // static key of sender and static key of recipient\n\n      let zS;\n\n      const _temp = function () {\n        if (senderSecret instanceof Uint8Array) {\n          zS = sharedKey(senderSecret, recipientPublicKey);\n        } else {\n          return Promise.resolve(senderSecret(recipientPublicKey)).then(function (_senderSecret) {\n            zS = _senderSecret;\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const alg = 'ECDH-1PU+XC20PKW';\n  const keyLen = 256;\n  const crv = 'X25519';\n  let partyUInfo;\n  let partyVInfo;\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu);\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv);\n  return {\n    alg,\n    enc: 'XC20P',\n    encrypt,\n    encryptCek\n  };\n}\n\nfunction validateHeader(header) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header');\n  }\n}\n\nfunction x25519Decrypter(receiverSecret) {\n  const decrypt = function (sealed, iv, aad, recipient) {\n    try {\n      var _recipient, _recipient$header$epk;\n\n      function _temp6() {\n        // Key Encryption Key\n        const kek = concatKDF(sharedSecret, keyLen, alg); // Content Encryption Key\n\n        const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag);\n        return Promise.resolve(xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))).then(function (cek) {\n          return cek === null ? null : xc20pDirDecrypter(cek).decrypt(sealed, iv, aad);\n        });\n      }\n\n      validateHeader((_recipient = recipient) == null ? void 0 : _recipient.header);\n      recipient = recipient;\n      if (((_recipient$header$epk = recipient.header.epk) == null ? void 0 : _recipient$header$epk.crv) !== crv || typeof recipient.header.epk.x == 'undefined') return Promise.resolve(null);\n      const publicKey = base64ToBytes(recipient.header.epk.x);\n      let sharedSecret;\n\n      const _temp5 = function () {\n        if (receiverSecret instanceof Uint8Array) {\n          sharedSecret = sharedKey(receiverSecret, publicKey);\n        } else {\n          return Promise.resolve(receiverSecret(publicKey)).then(function (_receiverSecret) {\n            sharedSecret = _receiverSecret;\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp6) : _temp6(_temp5));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const alg = 'ECDH-ES+XC20PKW';\n  const keyLen = 256;\n  const crv = 'X25519';\n  return {\n    alg,\n    enc: 'XC20P',\n    decrypt\n  };\n}\n/**\r\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\r\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\r\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\r\n */\n\nfunction xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey) {\n  const decrypt = function (sealed, iv, aad, recipient) {\n    try {\n      var _recipient$header$epk2;\n\n      function _temp8() {\n        const sharedSecret = new Uint8Array(zE.length + zS.length);\n        sharedSecret.set(zE);\n        sharedSecret.set(zS, zE.length); // Key Encryption Key\n\n        let producerInfo;\n        let consumerInfo;\n        if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu);\n        if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv);\n        const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo); // Content Encryption Key\n\n        const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag);\n        return Promise.resolve(xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))).then(function (cek) {\n          return cek === null ? null : xc20pDirDecrypter(cek).decrypt(sealed, iv, aad);\n        });\n      }\n\n      recipient = recipient;\n      validateHeader(recipient.header);\n      if (((_recipient$header$epk2 = recipient.header.epk) == null ? void 0 : _recipient$header$epk2.crv) !== crv || typeof recipient.header.epk.x == 'undefined') return Promise.resolve(null); // ECDH-1PU requires additional shared secret between\n      // static key of sender and static key of recipient\n\n      const publicKey = base64ToBytes(recipient.header.epk.x);\n      let zE;\n      let zS;\n\n      const _temp7 = function () {\n        if (recipientSecret instanceof Uint8Array) {\n          zE = sharedKey(recipientSecret, publicKey);\n          zS = sharedKey(recipientSecret, senderPublicKey);\n        } else {\n          return Promise.resolve(recipientSecret(publicKey)).then(function (_recipientSecret) {\n            zE = _recipientSecret;\n            return Promise.resolve(recipientSecret(senderPublicKey)).then(function (_recipientSecret2) {\n              zS = _recipientSecret2;\n            });\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp7 && _temp7.then ? _temp7.then(_temp8) : _temp8(_temp7));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const alg = 'ECDH-1PU+XC20PKW';\n  const keyLen = 256;\n  const crv = 'X25519';\n  return {\n    alg,\n    enc: 'XC20P',\n    decrypt\n  };\n}\n\nexport { ES256KSigner, EdDSASigner, EllipticSigner, NaclSigner, SimpleSigner, base58ToBytes, base64ToBytes, createAnonDecrypter, createAnonEncrypter, createAuthDecrypter, createAuthEncrypter, createJWE, createJWS, createJWT, createX25519ECDH, decodeJWT, decryptJWE, hexToBytes, resolveX25519Encrypters, toEthereumAddress, verifyJWS, verifyJWT, x25519Decrypter, x25519Encrypter, xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2, xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2, xc20pDirDecrypter, xc20pDirEncrypter };\n//# sourceMappingURL=index.module.js.map\n","import { publicKeyJwkFromPublicKey, jwkToSecretBytes } from \"./utils\"\r\nimport { pre, DEFAULT_NAME, wallet, assertWallet } from \"../../internal/index\"\r\nimport { getConfig } from \"../index\"\r\nimport { Ed25519Provider } from \"./provider\"\r\n\r\nlet wasmWallet\r\nlet getPublicKey\r\n\r\nexport const config = {\r\n    confirm: {\r\n        sign: () => {\r\n            return window.confirm(`Sign this message?`)\r\n        },\r\n    },\r\n}\r\n\r\nexport const ed25519 = {\r\n    setWasmWallet: (w, publicKeyGetter) => {\r\n        wasmWallet = w\r\n        getPublicKey = publicKeyGetter\r\n    },\r\n    // TODO: Separate the key types, ed25519, RSA, BLS, etc\r\n    generateKeypair: () => {\r\n        if (!assertReady())\r\n            return new Error(\r\n                \"Wallet not connected or initialized. Run connect() and await initialize() first.\"\r\n            )\r\n        let keypair = wasmWallet.generate_ed25519_keypair()\r\n        let publicKey = keypair.public()\r\n        let secretKey = keypair.secret()\r\n        return { publicKey, secretKey }\r\n    },\r\n    sign: async (\r\n        data: Uint8Array,\r\n        dataLayout = {} // to confirm that the data the apps wants you to sign is what you want to sign\r\n    ) => {\r\n        await assertWallet()\r\n        let pre_name = DEFAULT_NAME\r\n        if (!pre || !pre_name || !pre.get(pre_name))\r\n            return new Error(\"No signer available.\")\r\n\r\n        const methodName = \"ed25519.sign\"\r\n        let confirmed = await getConfig().confirm(methodName, {\r\n            data,\r\n            dataLayout,\r\n        })\r\n        if (!confirmed) return false\r\n\r\n        const signature = pre.get(pre_name).sign(new Uint8Array(data))\r\n\r\n        return signature\r\n    },\r\n\r\n    // technically verify doesn't need to be done in the wallet... but for convenience its here\r\n    verify: (\r\n        public_key: Uint8Array,\r\n        message: Uint8Array,\r\n        signature: Uint8Array,\r\n        opts = { pre_name: DEFAULT_NAME, dataLayout: {} }\r\n    ) => {\r\n        const verified = wallet.verify(\r\n            new Uint8Array(public_key),\r\n            new Uint8Array(message),\r\n            new Uint8Array(signature)\r\n        )\r\n        return verified\r\n    },\r\n\r\n    didProvider: async () => {\r\n        // Provider is set during initialization since we need the keys\r\n    },\r\n}\r\n\r\nfunction toHexString(byteArray) {\r\n    return Array.from(byteArray, function (byte) {\r\n        return (\"0\" + (byte & 0xff).toString(16)).slice(-2)\r\n    }).join(\"\")\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ed25519: typeof ed25519\r\n    }\r\n}\r\n","import { DEFAULT_NAME } from '../internal/index';\r\n\r\nimport { proxcryptor } from './proxcryptor/index';\r\n\r\nconst browser = () => ![typeof window, typeof document].includes('undefined');\r\n\r\n// import plugins\r\nimport { ed25519 } from './ed25519';\r\nimport { arweaveWalletAPI } from './arweave';\r\n// import { rsa } from \"./rsa\"\r\n\r\nimport { jwkToSecretBytes } from './ed25519/utils';\r\n\r\nconst STAY_CONNECTED = 'STAY_CONNECTED';\r\n\r\nconst textDecoder = new TextDecoder();\r\n\r\nlet connected = false;\r\n\r\nexport const setHost = (h) => {\r\n\thost = h;\r\n};\r\n\r\nexport let config: { [Key: string]: any } = {};\r\n\r\nexport const setConfig = (key: string, value: any) => {\r\n\tconfig[key] = value;\r\n};\r\n\r\nexport const getConfig = () => {\r\n\treturn config;\r\n};\r\n\r\n// : { [Key: string]: Function | Object }\r\nexport const handlers = {\r\n\tsetConfig,\r\n\tgetConfig,\r\n\tconfig,\r\n\ted25519,\r\n\tarweaveWalletAPI,\r\n\tproxcryptor,\r\n\r\n\tconnect: async (origin: type) => {\r\n\t\tconst config = getConfig();\r\n\r\n\t\tif (!typeof config.confirm === 'function')\r\n\t\t\treturn new Error(\r\n\t\t\t\t'User must provide a confirm function to the handler using setConfig(confirmFn) '\r\n\t\t\t); // user mus\r\n\r\n\t\ttry {\r\n\t\t\tconst confirmed =\r\n\t\t\t\tsessionStorage.getItem(STAY_CONNECTED) == 'true' || config.confirm('connect', { origin });\r\n\r\n\t\t\tif (!confirmed) return new Error(`User disallowed connection from origin ${origin}`);\r\n\r\n\t\t\tconnected = true;\r\n\t\t} catch (error) {}\r\n\t},\r\n\r\n\tstayConnected: () => {\r\n\t\twindow.sessionStorage.setItem(STAY_CONNECTED, 'true');\r\n\t},\r\n\tgetPublicKey: (pre_name?: string = DEFAULT_NAME): Uint8Array => {\r\n\t\treturn proxcryptor.getPublicKey(pre_name); // default stub for now? for backwards compat.\r\n\t}\r\n};\r\n\r\nexport type * from './proxcryptor';\r\n","export var MessageType;\n(function (MessageType) {\n    MessageType[\"Call\"] = \"call\";\n    MessageType[\"Reply\"] = \"reply\";\n    MessageType[\"Syn\"] = \"syn\";\n    MessageType[\"SynAck\"] = \"synAck\";\n    MessageType[\"Ack\"] = \"ack\";\n})(MessageType || (MessageType = {}));\nexport var Resolution;\n(function (Resolution) {\n    Resolution[\"Fulfilled\"] = \"fulfilled\";\n    Resolution[\"Rejected\"] = \"rejected\";\n})(Resolution || (Resolution = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[\"ConnectionDestroyed\"] = \"ConnectionDestroyed\";\n    ErrorCode[\"ConnectionTimeout\"] = \"ConnectionTimeout\";\n    ErrorCode[\"NoIframeSrc\"] = \"NoIframeSrc\";\n})(ErrorCode || (ErrorCode = {}));\nexport var NativeErrorName;\n(function (NativeErrorName) {\n    NativeErrorName[\"DataCloneError\"] = \"DataCloneError\";\n})(NativeErrorName || (NativeErrorName = {}));\nexport var NativeEventType;\n(function (NativeEventType) {\n    NativeEventType[\"Message\"] = \"message\";\n})(NativeEventType || (NativeEventType = {}));\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport { onMount } from 'svelte';\r\n\r\n\tlet offsetHeight;\r\n\tlet offsetWidth;\r\n\r\n\tlet width;\r\n\r\n\tlet resolveConnector;\r\n\tlet Connection;\r\n\tlet connector;\r\n\t// = new Promise((resolve, reject) => {\r\n\t// \tresolveConnector = resolve;\r\n\t// });\r\n\r\n\tlet connectionReady;\r\n\tlet optionalHandlers = {\r\n\t\tsetWidth: (w) => (width = w)\r\n\t};\r\n\r\n\tonMount(async () => {\r\n\t\t({ Connection } = await import('@peerpiper/iframe-wallet-sdk'));\r\n\t\tconst connection = new Connection();\r\n\t\tconnector = await connection.init(optionalHandlers);\r\n\r\n\t\tconnectionReady = async () => {\r\n\t\t\tconnector.walletReady(); // signal to the connector the wallet has loaded\r\n\t\t};\r\n\t});\r\n\r\n\t$: connector && offsetHeight && setHeight(offsetHeight);\r\n\t$: connector && offsetWidth && setWidth(offsetWidth);\r\n\r\n\tfunction show() {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.show(); // works\r\n\t}\r\n\r\n\tfunction hide() {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.hide(); // works\r\n\t}\r\n\r\n\tfunction setHeight(height) {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.setIframeParentHeight(height); // works\r\n\t}\r\n\r\n\tfunction setWidth(width) {\r\n\t\t// console.log(`Setting width ${width}`);\r\n\t\tconnector.setIframeParentWidth(width); // works\r\n\t}\r\n</script>\r\n\r\n<div class=\"autosizer\" bind:offsetHeight bind:offsetWidth style=\"max-width: {width}px;\">\r\n\t{#if connectionReady}\r\n\t\t<slot {connectionReady} {show} {hide} />\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.autosizer {\r\n\t\tmargin: 0em;\r\n\t\t/* min-height: 100%;\r\n        height: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tflex-direction: column;\r\n\t\tflex-wrap: nowrap; */\r\n\t}\r\n</style>\r\n","import { derived, writable } from 'svelte/store';\r\n\r\nexport const keypairs = writable(new Map());\r\n\r\nexport const storedValue = writable();\r\n","<script>\r\n\t// @ts-nocheck\r\n\texport let clickHandler;\r\n\r\n\texport let type;\r\n\tlet green = 'bg-green-500 hover:bg-green-700 text-white';\r\n\tlet blue = 'bg-blue-500 hover:bg-blue-700 text-white';\r\n\tlet red = 'bg-red-500 hover:bg-red-700 text-white';\r\n\tlet yellow = 'bg-yellow-500 hover:bg-yellow-700 text-white';\r\n</script>\r\n\r\n<button\r\n\tclass=\"{type == 'Yes'\r\n\t\t? green\r\n\t\t: type == 'No'\r\n\t\t? red\r\n\t\t: type == 'Connecting'\r\n\t\t? yellow\r\n\t\t: blue} font-bold rounded shadow-md py-4 my-4 mx-2 px-6 w-fit\"\r\n\tdisabled={type == 'Connecting'}\r\n\ton:click|preventDefault={clickHandler}\r\n>\r\n\t<slot />\r\n</button>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS } from '@peerpiper/iframe-wallet-sdk';\r\n\timport { storedValue } from './stores';\r\n\timport Button from './components/atomic/Button.svelte';\r\n\r\n\texport let mounted;\r\n\r\n\t// function names assigned only after component loads in DOM\r\n\tlet openTwinWindow;\r\n\tlet handleMessage;\r\n\r\n\t// state variables\r\n\tlet connecting;\r\n\tlet openedWindow;\r\n\r\n\tlet topUrl;\r\n\r\n\tonMount(async () => {\r\n\t\ttopUrl = self === top ? document.URL : document.referrer;\r\n\r\n\t\t// If 1) is NOT top AND 2) No keys are stored a new twin window must be opened so that the user can generate keys, in the top window\r\n\t\topenTwinWindow = () => {\r\n\t\t\tconnecting = true;\r\n\t\t\topenedWindow = window.open(window.location.href, '_blank'); // open the same domain to provide maximum security.\r\n\t\t};\r\n\r\n\t\thandleMessage = async (event) => {\r\n\t\t\tif (event.data == CONSTANTS.OPENED_SIGNAL) {\r\n\t\t\t\tevent.ports[0].postMessage(topUrl);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (event.data.key == CONSTANTS.WINDOW_SYNC) {\r\n\t\t\t\t$storedValue = event.data.storedValue;\r\n\r\n\t\t\t\t// save mnemonic to localstorage\r\n\t\t\t\t// run: mnemonic to proxcryptor\r\n\t\t\t\t// send confirmation back to opened window (so it can close)\r\n\r\n\t\t\t\t// await importKeys(JSON.parse(event.data.data)); // import the keys here in this browser context\r\n\t\t\t\tevent.ports[0].postMessage('Imported'); // send ack back to Opened window so it can remove \"pending\" label for this window\r\n\t\t\t\tconnecting = false;\r\n\t\t\t\topenedWindow.close();\r\n\t\t\t\twindow.focus(); // fails tho\r\n\t\t\t}\r\n\r\n\t\t\t// Main page closed, state is no longer trying to connect\r\n\t\t\tif (event.data == CONSTANTS.CLOSING) {\r\n\t\t\t\tconnecting = false;\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n</script>\r\n\r\n<svelte:window on:message={handleMessage} />\r\n\r\n<div class=\"connector flex flex-col min-h-full items-center justify-center flex-nowrap\">\r\n\t{#if mounted}\r\n\t\t{#if $storedValue}\r\n\t\t\t<slot />\r\n\t\t{:else}\r\n\t\t\t<div>\r\n\t\t\t\t<Button type={connecting ? 'Connecting' : ''} clickHandler={openTwinWindow}\r\n\t\t\t\t\t>{connecting ? 'Connecting' : 'Connect'}</Button\r\n\t\t\t\t>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t{/if}\r\n</div>\r\n","// Pre-Init\r\nconst LUT_HEX_4b = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\r\nconst LUT_HEX_8b = new Array(0x100);\r\nfor (let n = 0; n < 0x100; n++) {\r\n\tLUT_HEX_8b[n] = `${LUT_HEX_4b[(n >>> 4) & 0xf]}${LUT_HEX_4b[n & 0xf]}`;\r\n}\r\n\r\n// End Pre-Init\r\nexport function bufftoHex(buffer) {\r\n\tlet out = '';\r\n\tfor (let idx = 0, edx = buffer.length; idx < edx; idx++) {\r\n\t\tout += LUT_HEX_8b[buffer[idx]];\r\n\t}\r\n\treturn out;\r\n}\r\n\r\nexport const shorten = (key: string, start = 6, end = 6) => {\r\n\tif (key.length < start + end + 3) return key;\r\n\treturn key.slice(0, start) + '...' + key.slice(key.length - end, key.length);\r\n};\r\n\r\nexport const shortenURL = (key: string) => {\r\n\tconst tail = 30;\r\n\tconst start = 'https://'.length; // key.slice(start, Math.min(start, 8)) +\r\n\tconst end = Math.max(key.length - tail, 0);\r\n\tconst maybeEllips = key.length > tail ? '..' : '';\r\n\treturn maybeEllips + key.slice(end, key.length);\r\n};\r\n","import { cubicInOut, linear, cubicOut } from '../easing/index.mjs';\nimport { is_function, assign } from '../internal/index.mjs';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nfunction blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const f = style.filter === 'none' ? '' : style.filter;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * amount}px);`\n    };\n}\nfunction fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n    const o = +getComputedStyle(node).opacity;\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => `opacity: ${t * o}`\n    };\n}\nfunction fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);\n\t\t\topacity: ${target_opacity - (od * u)}`\n    };\n}\nfunction slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {\n    const style = getComputedStyle(node);\n    const opacity = +style.opacity;\n    const height = parseFloat(style.height);\n    const padding_top = parseFloat(style.paddingTop);\n    const padding_bottom = parseFloat(style.paddingBottom);\n    const margin_top = parseFloat(style.marginTop);\n    const margin_bottom = parseFloat(style.marginBottom);\n    const border_top_width = parseFloat(style.borderTopWidth);\n    const border_bottom_width = parseFloat(style.borderBottomWidth);\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => 'overflow: hidden;' +\n            `opacity: ${Math.min(t * 20, 1) * opacity};` +\n            `height: ${t * height}px;` +\n            `padding-top: ${t * padding_top}px;` +\n            `padding-bottom: ${t * padding_bottom}px;` +\n            `margin-top: ${t * margin_top}px;` +\n            `margin-bottom: ${t * margin_bottom}px;` +\n            `border-top-width: ${t * border_top_width}px;` +\n            `border-bottom-width: ${t * border_bottom_width}px;`\n    };\n}\nfunction scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const sd = 1 - start;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - (sd * u)});\n\t\t\topacity: ${target_opacity - (od * u)}\n\t\t`\n    };\n}\nfunction draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n    let len = node.getTotalLength();\n    const style = getComputedStyle(node);\n    if (style.strokeLinecap !== 'butt') {\n        len += parseInt(style.strokeWidth);\n    }\n    if (duration === undefined) {\n        if (speed === undefined) {\n            duration = 800;\n        }\n        else {\n            duration = len / speed;\n        }\n    }\n    else if (typeof duration === 'function') {\n        duration = duration(len);\n    }\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`\n    };\n}\nfunction crossfade(_a) {\n    var { fallback } = _a, defaults = __rest(_a, [\"fallback\"]);\n    const to_receive = new Map();\n    const to_send = new Map();\n    function crossfade(from, node, params) {\n        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);\n        const to = node.getBoundingClientRect();\n        const dx = from.left - to.left;\n        const dy = from.top - to.top;\n        const dw = from.width / to.width;\n        const dh = from.height / to.height;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        const opacity = +style.opacity;\n        return {\n            delay,\n            duration: is_function(duration) ? duration(d) : duration,\n            easing,\n            css: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});\n\t\t\t`\n        };\n    }\n    function transition(items, counterparts, intro) {\n        return (node, params) => {\n            items.set(params.key, {\n                rect: node.getBoundingClientRect()\n            });\n            return () => {\n                if (counterparts.has(params.key)) {\n                    const { rect } = counterparts.get(params.key);\n                    counterparts.delete(params.key);\n                    return crossfade(rect, node, params);\n                }\n                // if the node is disappearing altogether\n                // (i.e. wasn't claimed by the other list)\n                // then we need to supply an outro\n                items.delete(params.key);\n                return fallback && fallback(node, params, intro);\n            };\n        };\n    }\n    return [\n        transition(to_send, to_receive, false),\n        transition(to_receive, to_send, true)\n    ];\n}\n\nexport { blur, crossfade, draw, fade, fly, scale, slide };\n","<script>\r\n\t// @ts-nocheck\r\n\timport { fade } from 'svelte/transition';\r\n\r\n\texport let value = null;\r\n\r\n\tlet clip;\r\n\tlet copied;\r\n\tlet duration = 2000;\r\n\r\n\tasync function copy() {\r\n\t\tvar promise = navigator.clipboard.writeText(clip.innerHTML);\r\n\t\tawait promise;\r\n\t\tvalue = promise;\r\n\t\tcopied = true;\r\n\t\tsetTimeout(() => (copied = false), 1);\r\n\t}\r\n</script>\r\n\r\n<!-- Clipboard  -->\r\n<div class=\"Clipboard-Container\" on:click={copy}>\r\n\t{#if copied}\r\n\t\t<div out:fade={{ duration }}>✔️Copied</div>\r\n\t{:else}\r\n\t\t<div in:fade={{ duration: 0, delay: duration }}>\r\n\t\t\t<svg\r\n\t\t\t\ton:click={copy}\r\n\t\t\t\tclass=\"octicon octicon-clippy\"\r\n\t\t\t\tviewBox=\"0 0 14 16\"\r\n\t\t\t\tversion=\"1.1\"\r\n\t\t\t\twidth=\"14\"\r\n\t\t\t\theight=\"16\"\r\n\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t>\r\n\t\t\t\t<title>Copy to clipboard</title>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\td=\"M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t{/if}\r\n\t<div class=\"Clipboard\" bind:this={clip}>\r\n\t\t<slot {copy} />\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\t.Clipboard {\r\n\t\tmargin: 0 0.5em;\r\n\t\tword-break: break-all;\r\n\t}\r\n\t.Clipboard-Container {\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.Clipboard-Container,\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t}\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: transparent;\r\n\t\tfill: transparent;\r\n\t\twidth: auto;\r\n\t\theight: 1.5em;\r\n\t}\r\n</style>\r\n","<script lang=\"ts\">\r\n\timport * as u8a from 'uint8arrays';\r\n\r\n\texport let pubkey: Uint8Array;\r\n\r\n\tfunction bytesToBase64(b: Uint8Array): string {\r\n\t\treturn u8a.toString(b, 'base64pad');\r\n\t}\r\n\r\n\tfunction bytesToBase58(b: Uint8Array): string {\r\n\t\treturn u8a.toString(b, 'base58btc');\r\n\t}\r\n\r\n\tfunction bytesToHex(b: Uint8Array): string {\r\n\t\treturn u8a.toString(b, 'base16');\r\n\t}\r\n\tlet selected = 'Base64';\r\n\tlet encoded = bytesToBase64(pubkey);\r\n\r\n\tlet white = ' bg-white rounded-lg text-black font-semibold py-1 px-2 m-1 ';\r\n\tlet grey = ' bg-gray-600 rounded-lg text-grey-dark font-semibold py-1 px-2 m-1 ';\r\n</script>\r\n\r\n<div class=\"flex flex-col sm:flex-row leading-8\">\r\n\t<div class=\"flex-grow justify-self-auto\">\r\n\t\t<slot {encoded}>\r\n\t\t\t{encoded}\r\n\t\t</slot>\r\n\t</div>\r\n\t<div class=\"flex-none flex flex-col justify-self-end bg-neutral-500/30 p-1 sm:p-2 rounded-lg\">\r\n\t\t<div class=\"flex-none text-center\">Same key, different format</div>\r\n\t\t<div class=\"flex-none text-center cursor-pointer select-none\">\r\n\t\t\t<span\r\n\t\t\t\tclass={selected == 'Base64' ? white : grey}\r\n\t\t\t\ton:click={() => {\r\n\t\t\t\t\tencoded = bytesToBase64(pubkey);\r\n\t\t\t\t\tselected = 'Base64';\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tBase64\r\n\t\t\t</span>\r\n\r\n\t\t\t<span\r\n\t\t\t\tclass={selected == 'Base58' ? white : grey}\r\n\t\t\t\ton:click={() => {\r\n\t\t\t\t\tencoded = bytesToBase58(pubkey);\r\n\t\t\t\t\tselected = 'Base58';\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tBase58\r\n\t\t\t</span>\r\n\r\n\t\t\t<span\r\n\t\t\t\tclass={selected == 'Hex' ? white : grey}\r\n\t\t\t\ton:click={() => {\r\n\t\t\t\t\tencoded = bytesToHex(pubkey);\r\n\t\t\t\t\tselected = 'Hex';\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tHex\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\t// show the user's keys\r\n\t// parse out the JWKs into types: RSA and Ed25519 according to JWK\r\n\timport { shorten, bufftoHex } from './utils';\r\n\timport Clipboard from './Clipboard.svelte';\r\n\timport EncodingSelector from './components/atomic/EncodingSelector.svelte';\r\n\r\n\texport let keys;\r\n\r\n\tlet selectedRSA;\r\n\tlet collapsed;\r\n</script>\r\n\r\n{#if keys && keys.length > 0}\r\n\t<div class=\"card text-toxic shadow-md shadow-toxic/50 rounded-lg p-4 m-4 w-auto bg-neutral-800\">\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.kty == 'RSA').length}\r\n\t\t\t<div class=\"keylist overflow-hidden\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Arweave</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.kty == 'RSA') as rsaJWK}\r\n\t\t\t\t\t\t<div class=\"flex flex-col\">\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclass=\"{collapsed && selectedRSA != rsaJWK.kid\r\n\t\t\t\t\t\t\t\t\t? 'hide'\r\n\t\t\t\t\t\t\t\t\t: ''} list-group-item list-group-item-action \"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{rsaJWK.name}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"flex-1\">\r\n\t\t\t\t\t\t\t\tBase64URL: <Clipboard>{rsaJWK.publicKeyJWK.kid}</Clipboard>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519')}\r\n\t\t\t<div class=\"keylist\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Ed25519</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519') as edJWK}\r\n\t\t\t\t\t\t\t<EncodingSelector pubkey={new Uint8Array(edJWK.publicKey)} let:encoded>\r\n\t\t\t\t\t\t\t\t<Clipboard>{encoded}</Clipboard>\r\n\t\t\t\t\t\t\t</EncodingSelector>\r\n\t\t\t\t\t\t\t<!-- <li class=\" list-group-item list-group-item-action \">\r\n\t\t\t\t\t\t\t\t{shorten(edJWK.name)}\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\tBase64URL: <Clipboard>{edJWK.publicKeyJWK.x}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\tBase58: <Clipboard>{edJWK.publicKeyBase58}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\tHex: <Clipboard>{bufftoHex(edJWK.publicKey)}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\tBytes: <Clipboard>{edJWK.publicKey}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li> -->\r\n\t\t\t\t\t\t\t<!-- <b>{shorten(key?.publicKeyBase58)}</b><br /> -->\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\t.keylist {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tflex-wrap: nowrap;\r\n\t\tjustify-content: flex-start;\r\n\t\talign-items: stretch;\r\n\t\talign-content: stretch;\r\n\t\tborder-bottom: 1px #d6e7df solid;\r\n\t\tpadding-bottom: 4px;\r\n\t\tmargin-bottom: 4px;\r\n\t}\r\n\t.left {\r\n\t\tflex-shrink: 2;\r\n\t\twidth: 85px;\r\n\t}\r\n\t.row,\r\n\tul {\r\n\t\tmargin: 0em;\r\n\t\tpadding: 0em;\r\n\t}\r\n\t.row:not(.left) {\r\n\t\tflex: 1 1 auto;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n</style>\r\n","<script lang=\"ts\">\r\n\t/**\r\n\tKeys can come from:\r\n\t- Loaded from storage (index.svelte, in which case this component is not needed)\r\n\t- Generated from scratch (here)\r\n\t- Load by user (here)\r\n\r\n\tkeys get saved to $storedValue which trigger the ImmortalDB saved\r\n\t*/\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport { storedValue } from './stores';\r\n\r\n\timport {\r\n\t\tgenerateMnemonic,\r\n\t\tgenerateRsaJwk,\r\n\t\tloadSecrets,\r\n\t\tgetLoadedKeys\r\n\t} from '@peerpiper/iframe-wallet-sdk';\r\n\timport ListKeys from './ListKeys.svelte';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet handleGenerateKeypair:\r\n\t\t| ((event: MouseEvent & { currentTarget: EventTarget & HTMLButtonElement }) => void)\r\n\t\t| null = null;\r\n\r\n\t// state variables\r\n\tlet creating = '';\r\n\tlet keys: {\r\n\t\tname: string;\r\n\t\tpublicKey: string; // todo: to UInt8Array?\r\n\t\tpublicKeyJWK: {\r\n\t\t\tkty: string;\r\n\t\t\tkid: string;\r\n\t\t\te: string; //'AQAB'; //  value 65537, the octet sequence to be base64url-encoded MUST consist of the three octets [1, 0, 1]; the resulting representation for this value is \"AQAB\"\r\n\t\t\tn: string; // keyDetails.n;\r\n\t\t}; // already a JWK\r\n\t\tpublicKeyBase58: string; // address = base64URL encoded hash of jwk.n\r\n\t}[];\r\n\r\n\tonMount(async () => {\r\n\t\thandleGenerateKeypair = async () => {\r\n\t\t\tcreating = 'Creating keypairs...';\r\n\r\n\t\t\tconst mnemonic = await generateMnemonic();\r\n\t\t\tconst rsajwk = await generateRsaJwk();\r\n\r\n\t\t\t// save to storedValue.\r\n\t\t\t// TODO: offer password protection/encryption?\r\n\t\t\t$storedValue = { ...$storedValue, mnemonic, rsajwk };\r\n\r\n\t\t\tcreating += '<br/>Created mnemonic.';\r\n\t\t\tcreating += `<br/>${mnemonic}`;\r\n\t\t\tcreating += '<br/>Creating master keypair (type ed25519)...';\r\n\t\t};\r\n\t});\r\n\r\n\t$: if ($storedValue && $storedValue.mnemonic) loadKeys(); // load keys once there is a storedValue\r\n\r\n\tasync function loadKeys() {\r\n\t\tawait loadSecrets({ mnemonic: $storedValue.mnemonic, rsajwk: $storedValue.rsajwk });\r\n\r\n\t\tdispatch('loadedKeys', 'details'); // let parent component know\r\n\t\tkeys = getLoadedKeys(); // get all proxcryptor public key info\r\n\t}\r\n</script>\r\n\r\n{#if handleGenerateKeypair}\r\n\t{#if ($storedValue != undefined && $storedValue == null) || !$storedValue?.mnemonic || !$storedValue?.rsajwk}\r\n\t\t<!-- Show \"Create Keys\" if no keys exist, no matter what page is showing -- toolbar? -->\r\n\t\t<div class=\"submit flex flex-col text-black bg-yellow-300 shadow p-8 m-4 rounded w-fit\">\r\n\t\t\t<button\r\n\t\t\t\tclass=\"bg-green-500 rounded shadow-lg shadow-slate-600/50 p-4 w-fit m-4 text-white\"\r\n\t\t\t\ton:click={handleGenerateKeypair}>Create New Keypairs</button\r\n\t\t\t>\r\n\t\t\t{@html creating}\r\n\t\t</div>\r\n\t{:else}\r\n\t\t<!-- GetKeys: has storedValue, sending to Connector if in Opened window. Else, allowing user to manage keys.<br /> -->\r\n\t\t<ListKeys {keys} />\r\n\t{/if}\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\tpadding: 2em;\r\n\t}\r\n</style>\r\n","<script lang=\"ts\">\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS } from '@peerpiper/iframe-wallet-sdk';\r\n\timport { storedValue } from './stores';\r\n\r\n\tlet keyDetails;\r\n\tlet mounted: boolean;\r\n\r\n\tlet syncKeys: (e: CustomEvent<any>) => void;\r\n\tlet pending: boolean = true;\r\n\r\n\tonMount(() => {\r\n\t\ttry {\r\n\t\t\tif (window.location.origin === window.opener?.origin) {\r\n\t\t\t\tsendOpenerMsg(CONSTANTS.OPENED_SIGNAL, (event) => {\r\n\t\t\t\t\t// called when the opener replies to our message above\r\n\t\t\t\t\tpending = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.warn(\"Origins didn't match\");\r\n\t\t}\r\n\r\n\t\tfunction sendOpenerMsg(msg: any, callback = (_: any) => {}) {\r\n\t\t\tconst channel = new MessageChannel();\r\n\t\t\tchannel.port1.onmessage = callback; // Listen for messages on port1\r\n\t\t\ttry {\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(msg, window.location.origin, [channel.port2]); // the opener will receive this message\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Called when user allows a copy of the keys to be imported to another browser window in same origin\r\n\t\tsyncKeys = (e: CustomEvent<any>): void => {\r\n\t\t\tsendOpenerMsg({ key: CONSTANTS.WINDOW_SYNC, storedValue: $storedValue }, (event) => {\r\n\t\t\t\tpending = false;\r\n\t\t\t\tnavigateBack();\r\n\t\t\t}); // uses same origin, keys are secure\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('beforeunload', () => {\r\n\t\t\ttry {\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(CONSTANTS.CLOSING);\r\n\t\t\t\tnavigateBack();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\tfunction navigateBack() {\r\n\t\tif (!window.opener) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t// window.opener.focus(); // fails\r\n\t\t\twindow.history.back(); // works\r\n\t\t\t// window.close();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n{#if mounted && !pending}\r\n\t<slot {syncKeys} />\r\n{/if}\r\n","<script>\r\n\timport Button from '../atomic/Button.svelte';\r\n\r\n\texport let props = { method: '', params: {} };\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n</script>\r\n\r\n<slot>\r\n\t<div>\r\n\t\t<div class=\"attention\">\r\n\t\t\t<div>\r\n\t\t\t\t⚠️ Authorize {props.method} from your wallet?\r\n\t\t\t</div>\r\n\t\t\t<div class=\"submit\">\r\n\t\t\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</slot>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.5em;\r\n\t\tmargin: 0.5em;\r\n\t\twidth: fit-content;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport DefaultConfirmation from './DefaultConfirmation.svelte';\r\n\timport Button from '../atomic/Button.svelte';\r\n\r\n\texport let props;\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<DefaultConfirmation bind:this={defConf} {props} let:props={p} on:confirmed>\r\n\t<div class=\"attention\">\r\n\t\t<!-- this is default content, override with slot -->\r\n\t\t<div>\r\n\t\t\t⚠️ Allow {p.params.origin} to see your <b>Public</b> Key?\r\n\t\t</div>\r\n\t\t<div class=\"submit\">\r\n\t\t\t<Button type={'Yes'} clickHandler={defConf.handleConfirm}>Yes</Button>\r\n\t\t</div>\r\n\t</div>\r\n</DefaultConfirmation>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","import * as ArweaveUtils from './utils';\r\n\r\n// In TypeScript 3.7, could be written as a single type:\r\n// `type DeepHashChunk = Uint8Array | DeepHashChunk[];`\r\ntype DeepHashChunk = Uint8Array | DeepHashChunks;\r\ninterface DeepHashChunks extends Array<DeepHashChunk> {}\r\n\r\nexport default async function deepHash(data: DeepHashChunk): Promise<Uint8Array> {\r\n\tif (Array.isArray(data)) {\r\n\t\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\t\tArweaveUtils.stringToBuffer('list'),\r\n\t\t\tArweaveUtils.stringToBuffer(data.length.toString())\r\n\t\t]);\r\n\r\n\t\treturn await deepHashChunks(data, await crypto.subtle.digest('SHA-384', tag));\r\n\t}\r\n\r\n\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\tArweaveUtils.stringToBuffer('blob'),\r\n\t\tArweaveUtils.stringToBuffer(data.byteLength.toString())\r\n\t]);\r\n\r\n\tconst taggedHash = ArweaveUtils.concatBuffers([\r\n\t\tawait crypto.subtle.digest('SHA-384', tag),\r\n\t\tawait crypto.subtle.digest('SHA-384', data)\r\n\t]);\r\n\r\n\treturn await crypto.subtle.digest('SHA-384', taggedHash);\r\n}\r\n\r\nasync function deepHashChunks(chunks: DeepHashChunks, acc: Uint8Array): Promise<Uint8Array> {\r\n\tif (chunks.length < 1) {\r\n\t\treturn acc;\r\n\t}\r\n\r\n\tconst hashPair = ArweaveUtils.concatBuffers([acc, await deepHash(chunks[0])]);\r\n\tconst newAcc = await crypto.subtle.digest('SHA-384', hashPair);\r\n\treturn await deepHashChunks(chunks.slice(1), newAcc);\r\n}\r\n","// import * as B64 from 'base64-js';\r\nimport { encode as fromByteArray, decode as toByteArray } from '@stablelib/base64';\r\nimport deepHash from './deepHash';\r\n// import * as BigNumber from 'bignumber.js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nexport type Base64UrlString = string;\r\n\r\nexport function concatBuffers(buffers: Uint8Array[] | ArrayBuffer[]): Uint8Array {\r\n\tlet total_length = 0;\r\n\r\n\tfor (let i = 0; i < buffers.length; i++) {\r\n\t\ttotal_length += buffers[i].byteLength;\r\n\t}\r\n\r\n\tlet temp = new Uint8Array(total_length);\r\n\tlet offset = 0;\r\n\r\n\ttemp.set(new Uint8Array(buffers[0]), offset);\r\n\toffset += buffers[0].byteLength;\r\n\r\n\tfor (let i = 1; i < buffers.length; i++) {\r\n\t\ttemp.set(new Uint8Array(buffers[i]), offset);\r\n\t\toffset += buffers[i].byteLength;\r\n\t}\r\n\r\n\treturn temp;\r\n}\r\n\r\nexport function b64UrlToString(b64UrlString: string): string {\r\n\tlet buffer = b64UrlToBuffer(b64UrlString);\r\n\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function bufferToString(buffer: Uint8Array | ArrayBuffer): string {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function stringToBuffer(string: string): Uint8Array {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextEncoder == 'undefined') {\r\n\t\tconst TextEncoder = require('util').TextEncoder;\r\n\t\treturn new TextEncoder().encode(string);\r\n\t}\r\n\treturn new TextEncoder().encode(string);\r\n}\r\n\r\nexport function stringToB64Url(string: string): string {\r\n\treturn bufferTob64Url(stringToBuffer(string));\r\n}\r\n\r\nexport function b64UrlToBuffer(b64UrlString: string): Uint8Array {\r\n\treturn new Uint8Array(toByteArray(b64UrlDecode(b64UrlString)));\r\n}\r\n\r\nexport function bufferTob64(buffer: Uint8Array): string {\r\n\treturn fromByteArray(new Uint8Array(buffer));\r\n}\r\n\r\nexport function bufferTob64Url(buffer: Uint8Array): string {\r\n\treturn b64UrlEncode(bufferTob64(buffer));\r\n}\r\n\r\nexport function b64UrlEncode(b64UrlString: string): string {\r\n\treturn b64UrlString.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\r\n}\r\n\r\nexport function b64UrlDecode(b64UrlString: string): string {\r\n\tb64UrlString = b64UrlString.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\tlet padding;\r\n\tb64UrlString.length % 4 == 0 ? (padding = 0) : (padding = 4 - (b64UrlString.length % 4));\r\n\treturn b64UrlString.concat('='.repeat(padding));\r\n}\r\n\r\nexport async function getSignatureData(tx): Promise<Uint8Array> {\r\n\t// Structured clone transfer strips all the fancy Function helpers\r\n\t// reconstruct Transaction Object to get them back\r\n\ttx = new Transaction(tx);\r\n\r\n\tswitch (tx.format) {\r\n\t\tcase 1:\r\n\t\t\tlet tags = tx.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\taccumulator,\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\t}, new Uint8Array());\r\n\r\n\t\t\treturn concatBuffers([\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\ttx.get('data', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttags\r\n\t\t\t]);\r\n\t\tcase 2:\r\n\t\t\tif (!tx.data_root) {\r\n\t\t\t\tawait tx.prepareChunks(tx.data);\r\n\t\t\t}\r\n\r\n\t\t\tconst tagList: [Uint8Array, Uint8Array][] = tx.tags.map((tag) => [\r\n\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t]);\r\n\r\n\t\t\treturn await deepHash([\r\n\t\t\t\tstringToBuffer(tx.format.toString()),\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttagList,\r\n\t\t\t\tstringToBuffer(tx.data_size),\r\n\t\t\t\ttx.get('data_root', { decode: true, string: false })\r\n\t\t\t]);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unexpected transaction format: ${tx.format}`);\r\n\t}\r\n}\r\n\r\nexport function setSignature(\r\n\ttx,\r\n\t{\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}\r\n) {\r\n\ttx.id = id;\r\n\ttx.owner = owner;\r\n\tif (reward) tx.reward = reward;\r\n\tif (tags) tx.tags = tags;\r\n\ttx.signature = signature;\r\n\treturn tx;\r\n}\r\n\r\n// from Arweave TX\r\n// https://github.com/ArweaveTeam/arweave-js/blob/8df379bfd2744fa3525fca8dee1f9d74f352bec6/src/common/lib/transaction.ts#L53\r\nclass BaseObject {\r\n\t[key: string]: any;\r\n\r\n\tpublic get(field: string): string;\r\n\tpublic get(field: string, options: { decode: true; string: false }): Uint8Array;\r\n\tpublic get(field: string, options: { decode: true; string: true }): string;\r\n\r\n\tpublic get(\r\n\t\tfield: string,\r\n\t\toptions?: {\r\n\t\t\tstring?: boolean;\r\n\t\t\tdecode?: boolean;\r\n\t\t}\r\n\t): string | Uint8Array | Tag[] {\r\n\t\tif (!Object.getOwnPropertyNames(this).includes(field)) {\r\n\t\t\tthrow new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\r\n\t\t}\r\n\r\n\t\t// Handle fields that are Uint8Arrays.\r\n\t\t// To maintain compat we encode them to b64url\r\n\t\t// if decode option is not specificed.\r\n\t\tif (this[field] instanceof Uint8Array) {\r\n\t\t\tif (options && options.decode && options.string) {\r\n\t\t\t\treturn bufferToString(this[field]);\r\n\t\t\t}\r\n\t\t\tif (options && options.decode && !options.string) {\r\n\t\t\t\treturn this[field];\r\n\t\t\t}\r\n\t\t\treturn bufferTob64Url(this[field]);\r\n\t\t}\r\n\r\n\t\tif (options && options.decode == true) {\r\n\t\t\tif (options && options.string) {\r\n\t\t\t\treturn b64UrlToString(this[field]);\r\n\t\t\t}\r\n\r\n\t\t\treturn b64UrlToBuffer(this[field]);\r\n\t\t}\r\n\r\n\t\treturn this[field];\r\n\t}\r\n}\r\n\r\nexport class Tag extends BaseObject {\r\n\treadonly name: string;\r\n\treadonly value: string;\r\n\r\n\tpublic constructor(name: string, value: string, decode = false) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n\r\nexport interface TransactionInterface {\r\n\tformat: number;\r\n\tid: string;\r\n\tlast_tx: string;\r\n\towner: string;\r\n\ttags: Tag[];\r\n\ttarget: string;\r\n\tquantity: string;\r\n\tdata: Uint8Array;\r\n\treward: string;\r\n\tsignature: string;\r\n\tdata_size: string;\r\n\tdata_root: string;\r\n}\r\nexport default {};\r\nexport class Transaction extends BaseObject implements TransactionInterface {\r\n\tpublic readonly format: number = 2;\r\n\tpublic id: string = '';\r\n\tpublic readonly last_tx: string = '';\r\n\tpublic owner: string = '';\r\n\tpublic tags: Tag[] = [];\r\n\tpublic readonly target: string = '';\r\n\tpublic readonly quantity: string = '0';\r\n\tpublic readonly data_size: string = '0';\r\n\tpublic data: Uint8Array = new Uint8Array();\r\n\tpublic data_root: string = '';\r\n\tpublic reward: string = '0';\r\n\tpublic signature: string = '';\r\n\r\n\t// Computed when needed.\r\n\tpublic chunks?: {\r\n\t\tdata_root: Uint8Array;\r\n\t\tchunks: Chunk[];\r\n\t\tproofs: Proof[];\r\n\t};\r\n\r\n\tpublic constructor(attributes: Partial<TransactionInterface> = {}) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, attributes);\r\n\r\n\t\t// If something passes in a Tx that has been toJSON'ed and back,\r\n\t\t// or where the data was filled in from /tx/data endpoint.\r\n\t\t// data will be b64url encoded, so decode it.\r\n\t\tif (typeof this.data === 'string') {\r\n\t\t\tthis.data = b64UrlToBuffer(this.data as string);\r\n\t\t}\r\n\r\n\t\tif (attributes.tags) {\r\n\t\t\tthis.tags = attributes.tags.map((tag: { name: string; value: string }) => {\r\n\t\t\t\treturn new Tag(tag.name, tag.value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic addTag(name: string, value: string) {\r\n\t\tthis.tags.push(new Tag(stringToB64Url(name), stringToB64Url(value)));\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn {\r\n\t\t\tformat: this.format,\r\n\t\t\tid: this.id,\r\n\t\t\tlast_tx: this.last_tx,\r\n\t\t\towner: this.owner,\r\n\t\t\ttags: this.tags,\r\n\t\t\ttarget: this.target,\r\n\t\t\tquantity: this.quantity,\r\n\t\t\tdata: bufferTob64Url(this.data),\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_tree: this.data_tree,\r\n\t\t\treward: this.reward,\r\n\t\t\tsignature: this.signature\r\n\t\t};\r\n\t}\r\n\r\n\tpublic setOwner(owner: string) {\r\n\t\tthis.owner = owner;\r\n\t}\r\n\r\n\tpublic setSignature({\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}) {\r\n\t\tthis.id = id;\r\n\t\tthis.owner = owner;\r\n\t\tif (reward) this.reward = reward;\r\n\t\tif (tags) this.tags = tags;\r\n\t\tthis.signature = signature;\r\n\t}\r\n\r\n\tpublic async prepareChunks(data: Uint8Array) {\r\n\t\t// Note: we *do not* use `this.data`, the caller may be\r\n\t\t// operating on a transaction with an zero length data field.\r\n\t\t// This function computes the chunks for the data passed in and\r\n\t\t// assigns the result to this transaction. It should not read the\r\n\t\t// data *from* this transaction.\r\n\r\n\t\tif (!this.chunks && data.byteLength > 0) {\r\n\t\t\tthis.chunks = await generateTransactionChunks(data);\r\n\t\t\tthis.data_root = bufferTob64Url(this.chunks.data_root);\r\n\t\t}\r\n\r\n\t\tif (!this.chunks && data.byteLength === 0) {\r\n\t\t\tthis.chunks = {\r\n\t\t\t\tchunks: [],\r\n\t\t\t\tdata_root: new Uint8Array(),\r\n\t\t\t\tproofs: []\r\n\t\t\t};\r\n\t\t\tthis.data_root = '';\r\n\t\t}\r\n\t}\r\n\r\n\t// Returns a chunk in a format suitable for posting to /chunk.\r\n\t// Similar to `prepareChunks()` this does not operate `this.data`,\r\n\t// instead using the data passed in.\r\n\tpublic getChunk(idx: number, data: Uint8Array) {\r\n\t\tif (!this.chunks) {\r\n\t\t\tthrow new Error(`Chunks have not been prepared`);\r\n\t\t}\r\n\t\tconst proof = this.chunks.proofs[idx];\r\n\t\tconst chunk = this.chunks.chunks[idx];\r\n\t\treturn {\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_path: bufferTob64Url(proof.proof),\r\n\t\t\toffset: proof.offset.toString(),\r\n\t\t\tchunk: bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))\r\n\t\t};\r\n\t}\r\n\r\n\tpublic async getSignatureData(): Promise<Uint8Array> {\r\n\t\tswitch (this.format) {\r\n\t\t\tcase 1:\r\n\t\t\t\tlet tags = this.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\t\taccumulator,\r\n\t\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t\t]);\r\n\t\t\t\t}, new Uint8Array());\r\n\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('data', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttags\r\n\t\t\t\t]);\r\n\t\t\tcase 2:\r\n\t\t\t\tif (!this.data_root) {\r\n\t\t\t\t\tawait this.prepareChunks(this.data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst tagList: [Uint8Array, Uint8Array][] = this.tags.map((tag) => [\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\r\n\t\t\t\treturn await deepHash([\r\n\t\t\t\t\tstringToBuffer(this.format.toString()),\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttagList,\r\n\t\t\t\t\tstringToBuffer(this.data_size),\r\n\t\t\t\t\tthis.get('data_root', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unexpected transaction format: ${this.format}`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function winstonToAr(\r\n\twinstonString: string,\r\n\t{ formatted = false, decimals = 12, trim = true } = {}\r\n) {\r\n\tlet number = stringToBigNum(winstonString, decimals).shiftedBy(-12);\r\n\r\n\treturn formatted ? number.toFormat(decimals) : number.toFixed(decimals);\r\n}\r\n\r\nexport function arToWinston(arString: string, { formatted = false } = {}) {\r\n\tlet number = stringToBigNum(arString).shiftedBy(12);\r\n\r\n\treturn formatted ? number.toFormat() : number.toFixed(0);\r\n}\r\n\r\nfunction stringToBigNum(stringValue: string, decimalPlaces: number = 12): BigNumber {\r\n\treturn BigNum(stringValue, decimalPlaces);\r\n}\r\n\r\nconst BigNum = (value: string, decimals: number): BigNumber => {\r\n\t// because of the way Vite builds libraries that have both commonjs and es modules :/\r\n\tlet instance;\r\n\ttry {\r\n\t\tinstance = BigNumber.clone({ DECIMAL_PLACES: decimals });\r\n\t} catch (error) {\r\n\t\tconsole.warn('Caught big num issues, try default', error);\r\n\t\tinstance = BigNumber.default.clone({ DECIMAL_PLACES: decimals });\r\n\t}\r\n\treturn new instance(value);\r\n};\r\n","<script>\r\n\timport * as ArweaveUtils from './arweave/utils';\r\n\timport Button from '../atomic/Button.svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tlet defConf;\r\n\tlet checksOut = false;\r\n\tconsole.log('Signing ', { params: props.params });\r\n\r\n\tconst transaction = props.params;\r\n\r\n\tlet tx = new ArweaveUtils.Transaction(transaction);\r\n\tlet tags = tx.tags.map((tag) => ({\r\n\t\tname: tag.get('name', { decode: true, string: true }),\r\n\t\tval: tag.get('value', { decode: true, string: true })\r\n\t}));\r\n</script>\r\n\r\n<!-- \r\n{props} passes the properties down to <DefaultConfirmation>\r\nlet:props={p} gets them back up from the <DefaultConfirmation> slot \r\n-->\r\n{#if transaction}\r\n\t<div class=\"attention\">\r\n\t\t<!-- this is default content, override with slot -->\r\n\t\t<div>\r\n\t\t\t⚠️ Attention! You are about to sign ({props.method}) this Arweave transaction. Authorize to\r\n\t\t\tproceed?\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\tTags:<br />\r\n\t\t\t{#each tags as { name, val }}\r\n\t\t\t\t<li class={name.includes('App-Name') ? 'bold' : ''}>\r\n\t\t\t\t\t{name}:\r\n\t\t\t\t\t{val}\r\n\t\t\t\t</li>\r\n\t\t\t{/each}\r\n\t\t\tToken transfer: {transaction.quantity}<br />\r\n\t\t\tGas fees: {transaction.reward} (~${(\r\n\t\t\t\tArweaveUtils.winstonToAr(transaction.reward) * 100\r\n\t\t\t).toFixed(5)})<br />\r\n\t\t</div>\r\n\t\t<div class=\"submit\">\r\n\t\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t\t</div>\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n\r\n\t.bold {\r\n\t\tfont-weight: bolder;\r\n\t}\r\n\tli {\r\n\t\toverflow-wrap: break-word;\r\n\t\tword-break: break-all;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport Button from '../atomic/Button.svelte';\r\n\timport DefaultConfirmation from './DefaultConfirmation.svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"flex flex-col bg-yellow-100 drop-shadow-lg rounded-sm w-auto m-4 p-6\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div class=\"flex-1\">\r\n\t\t<!-- JSON.stringify(, null, 2)   decoder.decode()-->\r\n\t\t<!-- {props.params.toString()}  -->\r\n\t\t<!-- TODO: Data layouts for confirmer  -->\r\n\t\t⚠️ Sign this transaction?\r\n\t</div>\r\n\t<div class=\"flex-1 p-4\">\r\n\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t</div>\r\n</div>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport Button from '../atomic/Button.svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"attention\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div>\r\n\t\t⚠️ Decrypt {decoder.decode(props.params.tag)}?\r\n\t</div>\r\n\t<div class=\"submit\">\r\n\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t\twidth: 100%;\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport Button from '../atomic/Button.svelte';\r\n\r\n\t// export let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"attention\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div>⚠️ Allow this app to Decrypt data?</div>\r\n\t<div class=\"submit\">\r\n\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t\twidth: 100%;\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport Button from '../atomic/Button.svelte';\r\n\timport EncodingSelector from '../atomic/EncodingSelector.svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"attention rounded-lg m-4 p-4\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div class=\"break-all\">\r\n\t\t⚠️ Grant Access to {props.params.tag} for\r\n\t\t<EncodingSelector pubkey={props.params.targetPublicKey} />\r\n\t</div>\r\n\t<div class=\"submit\">\r\n\t\t<Button type={'Yes'} clickHandler={handleConfirmed}>Yes</Button>\r\n\t\t<Button type={'No'} clickHandler={handleDenied}>No</Button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t\twidth: 100%;\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","import { handlers } from '@peerpiper/iframe-wallet-sdk';\r\nimport DefaultConfirmation from './DefaultConfirmation.svelte';\r\nimport Connect from './Connect.svelte';\r\nimport ArweaveSign from './ArweaveSign.svelte';\r\nimport Sign from './Sign.svelte';\r\nimport Decrypt from './Decrypt.svelte';\r\nimport ReDecrypt from './ReDecrypt.svelte';\r\nimport TransformTagKey from './TransformTagKey.svelte';\r\n\r\nlet confirmationComponents = {\r\n\tDefault: { component: DefaultConfirmation }\r\n};\r\n\r\n// setup boring defaults, can be overriden with fanicer by users\r\nfor (const [key, value] of Object.entries(handlers)) {\r\n\tconfirmationComponents[key] = { component: DefaultConfirmation };\r\n}\r\n\r\n// Customize certain confirmation components\r\nlet customizedComponents = {\r\n\tconnect: { component: Connect },\r\n\ted25519: {\r\n\t\tsign: {\r\n\t\t\tcomponent: Sign\r\n\t\t}\r\n\t},\r\n\tarweaveWalletAPI: {\r\n\t\tsign: {\r\n\t\t\tcomponent: ArweaveSign\r\n\t\t}\r\n\t},\r\n\tproxcryptor: {\r\n\t\tselfDecrypt: {\r\n\t\t\tcomponent: Decrypt\r\n\t\t},\r\n\t\ttransformTagKey: {\r\n\t\t\tcomponent: TransformTagKey\r\n\t\t},\r\n\t\treDecrypt: {\r\n\t\t\tcomponent: ReDecrypt\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconfirmationComponents = { ...confirmationComponents, ...customizedComponents };\r\n\r\nexport { confirmationComponents };\r\n","<script>\r\n\t// @ts-nocheck\r\n\r\n\timport { confirmationComponents } from './components/confirm/index';\r\n\timport { handlers } from '@peerpiper/iframe-wallet-sdk';\r\n\r\n\texport let show;\r\n\texport let hide;\r\n\r\n\tconst leaf = (obj, path) => path.split('.').reduce((value, el) => value && value[el], obj);\r\n\r\n\tlet requests = [];\r\n\r\n\t// set confirm fn\r\n\t// calling confirm adds a confirmation request to the list of outstanding request\r\n\t// resolving the Promise removes the request\r\n\t// if last request, hide() the UI\r\n\tconst confirm = async (confirmSection, params) => {\r\n\t\tconst component = confirmSection\r\n\t\t\t? leaf(confirmationComponents, confirmSection) || confirmationComponents.Default\r\n\t\t\t: false;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst handleConfirmed = () => {\r\n\t\t\t\tcommon();\r\n\t\t\t\tresolve(true); // signal handler to continue with action\r\n\t\t\t};\r\n\t\t\tconst handleDenied = () => {\r\n\t\t\t\tcommon();\r\n\t\t\t\tresolve(false); // signal handler to continue with action\r\n\t\t\t};\r\n\r\n\t\t\tconst thisRequest = { component, confirmSection, params, handleConfirmed, handleDenied };\r\n\r\n\t\t\tfunction common() {\r\n\t\t\t\trequests = requests.filter((req) => req !== thisRequest); // find and remove element\r\n\t\t\t\tif (requests.length == 0) hide(); // hide if last one removed\r\n\t\t\t}\r\n\r\n\t\t\trequests = [...requests, thisRequest];\r\n\t\t\tshow(); // trigger the UI to show this request\r\n\t\t});\r\n\t};\r\n\r\n\t// pass the above confirm function to the handlers so they can use it when their methods are called\r\n\thandlers.setConfig('confirm', confirm);\r\n</script>\r\n\r\n{#if requests}\r\n\t{#each requests as { component, confirmSection, params, handleConfirmed, handleDenied }}\r\n\t\t<div class=\"active\">\r\n\t\t\t<svelte:component\r\n\t\t\t\tthis={component.component}\r\n\t\t\t\tprops={{ method: confirmSection, params }}\r\n\t\t\t\t{handleConfirmed}\r\n\t\t\t\t{handleDenied}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t{/each}\r\n{/if}\r\n\r\n<style>\r\n\t.active {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tmin-width: 350px;\r\n\t\tmin-height: 50px;\r\n\t\tflex-direction: column;\r\n\t}\r\n</style>\r\n","<script context=\"module\" lang=\"ts\">\r\n\texport const prerender = true;\r\n</script>\r\n\r\n<script lang=\"ts\">\r\n\timport { onMount } from 'svelte';\r\n\timport AutoSizer from './AutoSizer.svelte';\r\n\timport Connector from './Connector.svelte';\r\n\timport GetKeys from './GetKeys.svelte';\r\n\timport { storedValue } from './stores';\r\n\timport Opened from './Opened.svelte';\r\n\timport Confirmer from './Confirmer.svelte';\r\n\r\n\tconst STORED_VALUE = 'STORED_VALUE';\r\n\tconst def = null;\r\n\r\n\t// browser functions (set in onMount to ensure browser loaded)\r\n\tlet ImmortalDB: any;\r\n\tlet save: Function;\r\n\tlet mounted: boolean = false;\r\n\r\n\tlet syncing: any;\r\n\r\n\tonMount(async () => {\r\n\t\t({ ImmortalDB } = await import('immortal-db'));\r\n\t\tconst storedString = await ImmortalDB.get(STORED_VALUE, def);\r\n\r\n\t\tif (storedString) {\r\n\t\t\tconst parsedVal = JSON.parse(storedString);\r\n\t\t\tif (parsedVal.mnemonic || parsedVal.rsajwk) $storedValue = parsedVal;\r\n\t\t}\r\n\r\n\t\tsave = () => {\r\n\t\t\tImmortalDB.set(STORED_VALUE, JSON.stringify($storedValue)); // auto save when $storedValue changes\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tsyncing = window.opener && window.opener?.origin === window.location.origin;\r\n\t\t} catch (error) {\r\n\t\t\t// not syncing by same origin, that's ok it was probably a regular link from somewhere\r\n\t\t}\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\t$: if (ImmortalDB && $storedValue && save) save();\r\n\r\n\tfunction loadedKeys() {\r\n\t\tsave();\r\n\t}\r\n</script>\r\n\r\n<!-- Based on whether this is the Window.Top (not an iframe) or a Child (iframe) depends on which to show: -->\r\n{#if ImmortalDB}\r\n\t{#if window == window.top}\r\n\t\t<!-- NOT an iframe  -->\r\n\t\t<div class=\"m-2\">\r\n\t\t\t{#if syncing}\r\n\t\t\t\t<!-- Opened handles on:loadedKeys by ALSO syncing them with the opener window -->\r\n\t\t\t\t<Opened let:syncKeys>\r\n\t\t\t\t\t{#if syncKeys}\r\n\t\t\t\t\t\t<GetKeys on:loadedKeys={loadedKeys} on:loadedKeys={syncKeys} />\r\n\t\t\t\t\t{/if}\r\n\t\t\t\t</Opened>\r\n\t\t\t{:else}\r\n\t\t\t\t<GetKeys on:loadedKeys />\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t{:else}\r\n\t\t<!-- Auto-resize embedded iframe -->\r\n\t\t<AutoSizer let:connectionReady let:show let:hide>\r\n\t\t\t<!-- connectionReady gets passed from AutoSizer to GetKeys -->\r\n\t\t\t<Connector {mounted}>\r\n\t\t\t\t<Confirmer {show} {hide} />\r\n\t\t\t\t{#if connectionReady}\r\n\t\t\t\t\t<GetKeys on:loadedKeys={connectionReady} />\r\n\t\t\t\t{/if}\r\n\t\t\t</Connector>\r\n\t\t</AutoSizer>\r\n\t{/if}\r\n{/if}\r\n","export const CONSTANTS = {\r\n    OPENED_SIGNAL: \"OPENED\",\r\n    KEYS_SYNC: \"KEYS_SYNC\",\r\n    WINDOW_SYNC: \"WINDOW_SYNC\",\r\n    SAVED_KEYS: \"__SAVED_KEY\",\r\n    CLOSING: \"CLOSING\",\r\n}\r\n"],"file":"_app/immutable/chunks/index-da018f21.js"}